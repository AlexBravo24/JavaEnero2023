--comentario
/*Podemos poner comentarios de multiples lineas
SQL lenguaje de consulta estructurado, es un lenguaje para actualizar y calcular la información en bases de datos relacionales
*/

--Base de datos - conjunto de datos organizados entre sí, almacenados en tablas
/*La estructura de las tablas sería de la siguiente manera: 
LLAVE PRIMARIA -- Id - Toda tabla debe llevar su llave primaria

LLAVE FORANEA - Puede llevar llave foranea, la cual es una llave primaria que proviene de otra tabla.

TIPOS DE DATOS: caracteres o numericos, tipo fecha

NUMBER - Datos numéricos
NVARCHAR2 - permite entrada de datos de caracteres alfabeticos y tambien caracteres especiales
DATE - utilizados para manejo de fecha y otra
*/

--Alumno
--matricula
--nombre
--fecha de nacimiento
--sexo
--grado
--status de activo o inactivo
--curp

--creando tabla de alumno
--La sintaxis puede ir en mayusculas o minusculas


CREATE TABLE ALUMNO(   --indicamos nombre de la tabla 
ID_ALUMNO NUMBER PRIMARY KEY,        --llave primaria
NOMBRE NVARCHAR2 (30),   --acepta 30 caracteres ene el nombre
FECHANAC DATE,
SEXO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 (20),
STATUS NUMBER);

--Si quiero ver la estructura de una tabla en consola es con y al final ctrl + enter
DESCRIBE ALUMNO;

--Crear un tabla con la carrera de los alumnos

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
AREA NVARCHAR2 (30),
NUM_SEMESTRES NUMBER,
NUM_MATERIAS NUMBER,
CREDITOS NUMBER);

DESCRIBE CARRERAS;

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_CARRERA NUMBER,
ID_ALUMNO NUMBER);

-- ENTIDADES FUERTES.- Son aquellas que tienen sus datos completos y no dependen de otra entidad o tabla para existir

--ENTIDADES DEBILES-. Son aquellas que reciben llave foranea y esto las hace dependientes de otras tablas para existir

--AGREGANDO RESTRICCIONES A UNA TABLA
--Las restricciones debes llevar un nombre y se identifican por el comando 'CONSTRAINT'

--En la tabla ALUMNO, vamos a agregar una restricción en el sexo para que solo podamos introducir 'MASCULINO' o 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_SEXO CHECK (SEXO IN ('MASCULINO', 'FEMENINO'));

--CREANDO UNA RESTRICCIÓN 
ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA UNIQUE (NOMBRE);

--AGREGANDO UNA LLAVE FORANEA
--Una llave foranea también es una restricción, porque vamos a especificar de donde proviene dicha llave

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO FOREIGN KEY(ID_ALUMNO) --quien recibe (de qué columna)
REFERENCES ALUMNO (ID_ALUMNO); --quien da (De que tabla y columna)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA FOREIGN KEY(ID_CARRERA) --quien recibe (de qué columna)
REFERENCES CARRERAS (ID_CARRERA);

--INSERCION DE DATOS INDIVIDUALES

DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES
(1, 'Aylin', '19-APR-95', 'FEMENINO', 'MOPA950419MVZRRY04', '8o SEMESTRE', 1);

INSERT INTO ALUMNO VALUES
(2, 'Alex', '08-MAY-98', 'MASCULINO', 'HDSYT950419MZRRY07', '8o SEMESTRE', 1);

INSERT INTO ALUMNO VALUES
(3, 'Abdiel', '30-DEC-97', 'MASCULINO', 'AABBT950419MZRRY07', '8o SEMESTRE', 1);

INSERT INTO ALUMNO VALUES
(4, 'Marcos', '19-MAY-96', 'MASCULINO', 'BFYRT478MZRRY08', '8o SEMESTRE', 1);

INSERT INTO ALUMNO VALUES
(5, 'Alejandro', '25-APR-97', 'MASCULINO', 'HRUHE478MZRR76', '8o SEMESTRE', 1);

SELECT * FROM ALUMNO;
INSERT INTO ALUMNO VALUES
(6, 'TAVO', TO_DATE ('1994-02-19', 'YYYY-MM-DD'), 'MASCULINO', 'BFYRT478MZRRY08', '8o SEMESTRE', 1);

--BORRAR un registro especificando el ID de ese registro
--Borrar de 'Nombre de la tabla' donde ´indicamos un campo´
DELETE FROM ALUMNO WHERE ID_ALUMNO=5;
SELECT * FROM ALUMNO;

DESCRIBE CARRERAS;

--INSERCION DE DATOS EN LA TABLA CARRERAS
INSERT INTO CARRERAS VALUES
(1, 'ING. EN SISTEMAS', 'EXACTAS', 8, 20,300);

INSERT INTO CARRERAS VALUES
(2, 'ING. EN ELECTRONICA', 'EXACTAS', 8, 28,300);

INSERT INTO CARRERAS VALUES
(3, 'MEDICINA', 'CIENCIAS DE LA SALUD', 10, 20,300);

INSERT INTO CARRERAS VALUES
(4, 'DERECHO', 'HUMANIDADES', 8, 18,290);

INSERT INTO CARRERAS VALUES
(5, 'LIC. ADMINISTRACIÓN', 'ECONOMICO ADM', 8, 19,270);

SELECT * FROM CARRERAS;

--PARA QUE LOS REGISTROS SE GUARDEN EN LA BASE DE DATOS
COMMIT;

--PARA GUARDAR EL CÓDIGO QUE VAMOS ESCRIBIENDO ES CTRL + S

DESCRIBE CARRERAS_ALUMNOS;
--INSERCIÓN DE DATOS EN LA TABLA RELACIONAL CARRERAS_ALUMNOS

INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,1,3);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,5,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (6,3,5);

--AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
--PODEMOS ESPECIFICAR QUE VAMOS A AGREGAR UNA COLUMNA CON ADD COLUMN
--O SI NO ESPECIFICAMOS AUTOMATICAMENTE AGREGA UNA COLUMNA, INDICANDO EL NOMBRE

ALTER TABLE CARRERAS ADD PRESUPUESTO_ANUAL NUMBER (5,2);--INDICAMOS LA LONGITUD 
--EN LOS CUALES 5 DIFITOS , DE LOS CUALES 2 SON DECIMALES. TENDRIAMOS VALORES DESDE -9999.99 HASTA 999.99

DESCRIBE CARRERAS;

--MODIFICAR TIPO DE DATO DE LA COLUMNA (SIEMPRE Y CUANDO NO TENGA DATOS INSERTADOS)

ALTER TABLE CARRERAS MODIFY PRESUPUESTO_ANUAL NVARCHAR2 (10);

DESCRIBE CARRERAS;

--RENOMBRAR UNA COLUMNA
ALTER TABLE CARRERAS RENAME COLUMN PRESUPUESTO_ANUAL TO PRESUPUESTO_MENSUAL;

--EJERCICIO
--CREAR UNA TABLA QUE SE LLAME TUTORES
--TIENE QUE LLEVAR ID DEL TUTOR, NOMBRE DEL TUTOR, CLAVE DEL TUTOR - PRIMARY KEY
--PONERLE RESTRICCION A LA CLAVE DEL TUTOR Y SOLO PUEDAN SER LA CLAVE (A,B,C,D)
--INSERTAR 10 REGISTROS

--CREAR UNA TABLA RELACIONAL ALUMNOS_TUTORES
--ID DE LA TABLA
--ID DEL ALUMNOS
--ID DEL TUTOR
--INSERTAR 5 REGISTROS

CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
CLAVE_TUTOR NVARCHAR2(10)
);

DESCRIBE TUTORES;

ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE_TUTOR CHECK (CLAVE_TUTOR IN ('A','B','C','D'));


INSERT INTO TUTORES VALUES
(1,'ROBERTO','A');

INSERT INTO TUTORES VALUES
(2,'LOLITA','B');

INSERT INTO TUTORES VALUES
(3,'ERICK','C');

INSERT INTO TUTORES VALUES
(4,'OCTAVIO','D');

INSERT INTO TUTORES VALUES
(5,'JUAN','A');

INSERT INTO TUTORES VALUES
(6,'BENITO','B');

INSERT INTO TUTORES VALUES
(7,'JENNIFER','C');

INSERT INTO TUTORES VALUES
(8,'ELENA','D');

INSERT INTO TUTORES VALUES
(9,'LINDA','A');

INSERT INTO TUTORES VALUES
(10,'MARGARITA','B');

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNO FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

--ELIMINAR UNA TABLA CON TODO Y SUS DATOS
DROP TABLE ALUMNOS_TUTORES;

--CREANDO SECUENCIAS 
--SE EMPLEA PARA GENERAR VALORES DE NUMEROS ENTEROS
--ESTOS PUEDEN SER CONSECUTIVOS (INCREMENTO DE 1)
--O CON UN INCREMENTO DE MÁS VALORES
--SE UTILIZA PARA GENERAR LAS LLAVES PRIMARIAS Y ASEGURARNOS QUE LOS VALORES NO SE REPITAN

--CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES
CREATE SEQUENCE ALUMNO_SEQ  --CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 7 --EL VALOR EN EL QUE INICIA LA SECUENCIA
INCREMENT BY 1 --INCREMENTA EL VALOR DE LA SECUENCIA COMO SE LE INDIQUE
MAXVALUE 999--INDICAMOS EL VALOR MAXIMO PARA LA SECUENCIA 
MINVALUE 1 --INDICAMOS EL VALOR MÍNIMO DE LA SECUENCIA 
CYCLE; --INDICAMOS SI LA SECUENCIA UNA VEZ LLEGADO A SU MAXIMO VALOR, INICIE DE NUEVO
--SINO INDICAMOS EL CYCLE, POR DEFAULT LA SECUENCIA CONTINUARIA

--CREAR UNA SECUENCIA CON LOS VALORES POR DEFECTO
CREATE SEQUENCE ALUMNOS_TUTORES_SEQ;

--TRIGGER (DISPARADOR) - EJECUTAR UNA ACCIÓN O DESENCADENAR UN EVENTO

CREATE TRIGGER INSERT_ALUMNOS --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN --DONDE SE EJECUTA EL TRIGGER 
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;  --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;


INSERT INTO ALUMNO VALUES
(1,'ALEJANDRO','17-JUN-94', 'MASCULINO', 'BFOIU78MZRRY08', '8o SEMESTRE', 1);

SELECT * FROM ALUMNO;

--CREAR EL TRIGGER PARA ALUMNOS_TUTORES
CREATE TRIGGER INSERT_ALUMNOS_TUTORES --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNOS_TUTORES FOR EACH ROW BEGIN --DONDE SE EJECUTA EL TRIGGER 
SELECT ALUMNO_TUTORES_SEQ.NEXTVAL INTO:NEW.ID_AT FROM DUAL;  --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;


--OTRA FORMA DE INSERCIÓN  - INSERCIÓN MASIVA

INSERT ALL
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (2,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (3,4)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (4,2)
SELECT *  FROM DUAL;

SELECT * FROM ALUMNOS_TUTORES;

--EJERCICIO 1:
--Se quiere diseñar una base de datos relacional para almacenar información sobre los asuntos que lleva un gabinete de abogados.
--Cada asunto tiene un número de expediente que lo identifica, y corresponde a un solo cliente. 
--Del asunto se debe almacenar el período (fecha de inicio y fecha de archivo o finalización), su estado (en trámite, archivado, etc.), 
--así como los datos personales del cliente al que pertenece (DNI, nombre, dirección, fecha nacimiento). 
--Algunos asuntos son llevados por uno o varios procuradores, de los que nos interesa también los datos personales
--(DNI, número de colegiado, nombre, apellidos, dirección, número de casos ganados).

CREATE TABLE ASUNTO( 
NUM_EXPEDIENTE NUMBER PRIMARY KEY, 
PERIODO DATE,
ESTADO NVARCHAR2 (15)
);

DESCRIBE ASUNTO;

CREATE TABLE CLIENTE(
DNI NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2(40),
FECHANAC DATE
);

DESCRIBE CLIENTE;

CREATE TABLE PROCURADOR(
ID_PROCURADOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECC_DESPACHO NVARCHAR2(30),
CASOS_GANADOS NUMBER,
MATRICULA NVARCHAR2(30)
);

DESCRIBE PROCURADOR;

CREATE TABLE ASUNTO_CLIENTE(
ID_AC NUMBER PRIMARY KEY,
NUM_EXPEDIENTE NUMBER,
DNI NUMBER);

DESCRIBE ASUNTO_CLIENTE;

CREATE TABLE ASUNTO_PROCURADOR(
ID_AP NUMBER PRIMARY KEY,
NUM_EXPEDIENTE NUMBER,
ID_PROCURADOR NUMBER);

DESCRIBE ASUNTO_PROCURADOR;

INSERT INTO ASUNTO VALUES
(1,'17-JUN-94','EN TRÁMITE');
INSERT INTO ASUNTO VALUES
(2,TO_DATE ('2019-02-14', 'YYYY-MM-DD'),'ARCHIVADO');
INSERT INTO ASUNTO VALUES
(3,TO_DATE ('2011-12-28', 'YYYY-MM-DD'),'ARCHIVADO');
INSERT INTO ASUNTO VALUES
(4,TO_DATE ('2019-01-25', 'YYYY-MM-DD'),'ARCHIVADO');
INSERT INTO ASUNTO VALUES
(5,TO_DATE ('2022-08-05', 'YYYY-MM-DD'),'EN TRÁMITE');

SELECT * FROM ASUNTO;

INSERT INTO CLIENTE VALUES
(145248,'RAMON LOPEZ','LOMAS BELTRAN #76',TO_DATE ('1972-09-05', 'YYYY-MM-DD'));
INSERT INTO CLIENTE VALUES
(264789,'PATRICIA RAMOS','COLORADO COL.JAIBA #856',TO_DATE ('1980-04-17', 'YYYY-MM-DD'));
INSERT INTO CLIENTE VALUES
(184321, 'ROSAURA RAMIREZ','CONSTITUCION #54 COL. CENTRO','11-FEB-70');
INSERT INTO CLIENTE VALUES
(253974, 'EMILIO CONDE','SANTOS #32 COL. E','18-MAY-89');
INSERT INTO CLIENTE VALUES
(317856, 'SARA GUZMAN','FERROCARRILERA #475 COL. SUR','27-DEC-56');

SELECT * FROM CLIENTE;

INSERT INTO PROCURADOR VALUES
(1,'ROGELIO SANCHEZ','APODACA #32',9,'SAHCDV655GF5');
INSERT INTO PROCURADOR VALUES
(2,'PEDRO ABARCA','ANAYA #252',12,'SDS61D1SDC');
INSERT INTO PROCURADOR VALUES
(3,'DAMARIS ZUÑIGA','VOLCANES #587B',6,'DJFSD516DSF');
INSERT INTO PROCURADOR VALUES
(4,'RITA AYALA','MENDOZA #457 NORTE',15,'SCC515ER1E5');
INSERT INTO PROCURADOR VALUES
(5,'GRETA CONTRERAS','LUCIANA #1547A',6,'SDCD5S41V6S51');

COMMIT;

--Inserción de datos en la tabla relacional ASUNTO_CLIENTE
INSERT INTO ASUNTO_CLIENTE VALUES(1,1,145248);
INSERT INTO ASUNTO_CLIENTE VALUES(2,3,264789);
INSERT INTO ASUNTO_CLIENTE VALUES(3,2,253974);
INSERT INTO ASUNTO_CLIENTE VALUES(4,5,184321);
INSERT INTO ASUNTO_CLIENTE VALUES(5,4,317856);

SELECT * FROM ASUNTO_CLIENTE;

INSERT INTO ASUNTO_PROCURADOR VALUES(1,5,4);
INSERT INTO ASUNTO_PROCURADOR VALUES(2,2,5);
INSERT INTO ASUNTO_PROCURADOR VALUES(3,3,3);
INSERT INTO ASUNTO_PROCURADOR VALUES(4,4,1);
INSERT INTO ASUNTO_PROCURADOR VALUES(5,1,2);

-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ASUNTO_SEQ START WITH 6 INCREMENT BY 1 MAXVALUE 999 MINVALUE 1 CYCLE;

--TRIGGER
CREATE TRIGGER INSERT_ASUNTO
BEFORE INSERT ON ASUNTO FOR EACH ROW BEGIN 
SELECT ASUNTO_SEQ.NEXTVAL INTO:NEW.NUM_EXPEDIENTE FROM DUAL; 
END;

INSERT INTO ASUNTO VALUES
(1,TO_DATE ('2014-03-21', 'YYYY-MM-DD'),'EN TRAMITE');

SELECT * FROM ASUNTO;
COMMIT;


--Se quiere diseñar una base de datos relacional para gestionar los datos de los socios de un club náutico. 
--De cada socio se guardan los datos personales y los datos del barco o barcos que posee: número de matrícula, nombre, número del amarre y 
--cuota que paga por el mismo. Además, se quiere mantener información sobre las salidas realizadas por cada barco, como la fecha y hora de salida, 
--el destino y los datos personales del patrón, que no tiene porque ser el propietario del barco, ni es necesario que sea socio del club.


CREATE TABLE SOCIO( 
ID_SOCIO NUMBER PRIMARY KEY, 
NOMBRE NVARCHAR2 (30),
FECHANAC_SOCIO DATE,
EDAD NUMBER,
DIRECCION NVARCHAR2(30)
);


CREATE TABLE BARCO( 
MATRICULA NVARCHAR2(15) PRIMARY KEY, 
NOMBRE NVARCHAR2 (30),
No_AMARRE NUMBER,
CUOTA NUMBER
);

CREATE TABLE PATRON( 
ID_PATRON NUMBER PRIMARY KEY, 
NOMBRE NVARCHAR2 (30),
FECHANAC_PATRON DATE,
EDAD NUMBER,
DIRECCION NVARCHAR2(30)
);

CREATE TABLE SALIDAS( 
ID_SALIDAS NUMBER PRIMARY KEY, 
DESTINO NVARCHAR2 (20),
FECHA_SALIDA DATE,
HORA NVARCHAR2(6)
);

--TABLA RELACIONAL DE DATOS DEL BARCO
CREATE TABLE RELACIONAL_BARCO(
ID_RELA_BARCO NUMBER PRIMARY KEY, 
ID_SOCIO NUMBER,
MATRICULA NVARCHAR2(15),
ID_PATRON NUMBER,
ID_SALIDAS NUMBER
);

--TABLA RELACIONAL DE DATOS DEL SOCIO Y SUS BARCOS
CREATE TABLE RELA_SOCIO_BARCO(
ID_BARCO_SOCIO NUMBER PRIMARY KEY, 
ID_SOCIO NUMBER,
MATRICULA NVARCHAR2(15)
);

--INSERCION DE DATOS EN LA TABLA SOCIO
INSERT INTO SOCIO VALUES
(1,'FERNANDO','17-JUN-75',45,'BRAVO #20');
INSERT INTO SOCIO VALUES
(2,'MARGARITA','14-JUL-67',56,'SANTA LUCIA #785');
INSERT INTO SOCIO VALUES
(3,'LEO','25-JAN-63',60,'VENECIA NORTE #425A');
INSERT INTO SOCIO VALUES
(4,'ALICIA','03-APR-83',40,'MERCURIO #78');
INSERT INTO SOCIO VALUES
(5,'JOSE','05-SEP-88',35,'SALAMANDRA #347');

--INSERCION DE DATOS EN LA TABLA BARCO
INSERT INTO BARCO VALUES
('DF651DF','EL VELOZ',40,3520);
INSERT INTO BARCO VALUES
('DDJKV5V4','EL TIBURON',35,1546);
INSERT INTO BARCO VALUES
('DC56D','EL CAMARONERO',52,3240);
INSERT INTO BARCO VALUES
('THY1D','LA LOLITA',78,1543);
INSERT INTO BARCO VALUES
('SCV51F','LA BALLENA AZUL',87,4562);

--INSERCION DE DATOS EN LA TABLA PATRON
INSERT INTO PATRON VALUES
(1,'PEPE','19-OCT-88',35,'RIO SOTO #78');
INSERT INTO PATRON VALUES
(2,'MANUEL','23-NOV-82',35,'CANTERIO #898');
INSERT INTO PATRON VALUES
(3,'LORENZO','10-DEC-74',49,'SANTA RITA #801');
INSERT INTO PATRON VALUES
(4,'MATIAS','1-AUG-94',29,'VERACRUZANOS #564');
INSERT INTO PATRON VALUES
(5,'SAMUEL','15-NOV-60',35,'COLORADO #329');


--INSERCION DE DATOS EN LA TABLA SALIDAS
INSERT INTO SALIDAS VALUES
(1,'ACAPULCO','13-MAY-22','09:00');
INSERT INTO SALIDAS VALUES
(2,'MAZATLAN','28-JAN-20','07:30');
INSERT INTO SALIDAS VALUES
(3,'COATZACOALCOS','24-DEC-19','17:00');
INSERT INTO SALIDAS VALUES
(4,'COZUMEL','18-JAN-23','09:00');
INSERT INTO SALIDAS VALUES
(5,'CANCUN','03-JUL-22','20:00');



--INSERCION DE DATOS EN LA TABLA RELACIONAL_BARCO
INSERT INTO RELACIONAL_BARCO VALUES
(1,1,'DF651DF',3,5);
INSERT INTO RELACIONAL_BARCO VALUES
(2,3,'THY1DF',1,3);
INSERT INTO RELACIONAL_BARCO VALUES
(3,5,'DC56D',5,1);
INSERT INTO RELACIONAL_BARCO VALUES
(4,2,'DDJKV5V4',4,4);
INSERT INTO RELACIONAL_BARCO VALUES
(5,4,'SCV51F',2,2);

COMMIT;

--INSERCION DE DATOS EN LA TABLA DEL SOCIO Y SUS BARCOS
INSERT INTO RELA_SOCIO_BARCO VALUES
(1,1,'DF651DF');
INSERT INTO RELA_SOCIO_BARCO VALUES
(2,5,'SCV51F');
INSERT INTO RELA_SOCIO_BARCO VALUES
(3,2,'DC56D');
INSERT INTO RELA_SOCIO_BARCO VALUES
(4,3,'DDJKV5V4');
INSERT INTO RELA_SOCIO_BARCO VALUES
(5,4,'THY1DF');

ALTER TABLE RELA_SOCIO_BARCO ADD CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES SOCIO (ID_SOCIO); -- QUIEN DA (DE QUE TABLA Y QUE COLUMNA)



--CREACION DE UNA SECUENCIA
CREATE SEQUENCE BARCO_SEQ
START WITH 6 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
CYCLE;

-- CREACION DE UNA SECUENCIA CON LOS VALORES POR DEFECTO
CREATE SEQUENCE SOCIO_SEQ;


-- CREACION DEL TRIGGER
CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN 
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

INSERT INTO SOCIO VALUES
(9,'ALVARO','14-APR-72',51,'REVOLUCION #404');


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




--EJERCICIO AEROLINEA

--ENTIDADES FUERTES

CREATE TABLE BASES( --------------------------------------------------------------------------------------------BASES
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2 (20)
);

CREATE SEQUENCE BASES_SEQ;
CREATE TRIGGER INSERT_BASES
BEFORE INSERT ON BASES FOR EACH ROW BEGIN
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;

INSERT INTO BASES (TIPO) VALUES ('MANTENIMIENTO');
INSERT INTO BASES (TIPO) VALUES ('DESCANSO');
SELECT * FROM BASES;



CREATE TABLE VUELO(   ----------------------------------------------------------------------------------------------VUELO
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2 (30),
DESTINO NVARCHAR2 (30),
HORARIOVIAJE DATE
);

CREATE SEQUENCE VUELO_SEQ;
CREATE TRIGGER INSERT_VUELO
BEFORE INSERT ON VUELO FOR EACH ROW BEGIN
SELECT VUELO_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;

INSERT ALL INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('MEXICO','JAPON',TO_DATE('2023-01-14 07:30:00', 'YYYY-MM-DD HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('CDMX','MEDELLIN', TO_DATE('2023-01-18 03:30:00', 'YYYY-MM-DD HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('CDMX','COSTA RICA', TO_DATE('2023-01-21 07:30:00', 'YYYY-MM-DD HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('MONTERRY','TIJUANA', TO_DATE('2023-01-22 05:30:00', 'YYYY-MM-DD HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('PUEBLA','CANCUN', TO_DATE('2023-01-24 11:30:00', 'YYYY-MM-DD HH24:MI:SS'))
SELECT * FROM DUAL;

COMMIT;

CREATE TABLE LISTAS_CLIENTES(   -----------------------------------------------------------------------------------------------------CLIENTES
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10),
DIRECCION NVARCHAR2 (30)
);

CREATE SEQUENCE LISTAS_CLIENTES_SEQ;
CREATE TRIGGER INSERT_LISTAS_CLIENTES
BEFORE INSERT ON LISTAS_CLIENTES FOR EACH ROW BEGIN
SELECT LISTAS_CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

INSERT ALL
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AYLIN','XALAPA','2282330908')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEX','XALAPA','2281072635')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEJANDRO','CDMX','3023079497')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EMMANUEL','CDMX','5630345103')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;

SELECT * FROM LISTAS_CLIENTES;



-- ENTIDADES DEBILES
CREATE TABLE AVIONES(  --------------------------------------------------------------------------------------------------------------AVIONES
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2 (20),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE AVIONES_SEQ;
CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

--REGISTRO DE AVIONES
INSERT ALL
INTO AVIONES (MODELO,ID_BASE) VALUES ('BOEING',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('AIRBUS',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('JET',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('AIRBUS A330',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('EMBRAER E JET-',1)
SELECT * FROM DUAL;

SELECT * FROM AVIONES;

CREATE TABLE PILOTOS( ------------------------------------------------------------------------------------------------------------------PILOTOS
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
HORASVIAJE NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE PILOTOS_SEQ;
CREATE TRIGGER INSERT_PILOTOS
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;

INSERT ALL
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('HUGO',300,2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('PACO',600,2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('LUIS',400,2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('PEDRO',850,2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('JAIRO',330,2)
SELECT * FROM DUAL;

SELECT * FROM PILOTOS;


CREATE TABLE VUELO_AVION_PILOTO( -------------------------------------------------------------------------------------------VUELO_AVION_PILOTO
ID_VAP NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_AVION NUMBER,
ID_PILOTO NUMBER,
CONSTRAINT FK_IDVUELO_VAP
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDAVION_VAP
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES (ID_AVION),
CONSTRAINT FK_IDPILOTO_VAP
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS (ID_PILOTO)
);

CREATE SEQUENCE VAP_SEQ;
CREATE TRIGGER INSERT_VAP
BEFORE INSERT ON VUELO_AVION_PILOTO FOR EACH ROW BEGIN
SELECT VAP_SEQ.NEXTVAL INTO:NEW.ID_VAP FROM DUAL;
END;

INSERT ALL 
INTO  VUELO_AVION_PILOTO  (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (1,3,2)
INTO  VUELO_AVION_PILOTO  (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (2,4,1)
INTO  VUELO_AVION_PILOTO  (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (3,1,4)
INTO  VUELO_AVION_PILOTO  (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (4,2,5)
INTO  VUELO_AVION_PILOTO  (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (5,5,3)
SELECT * FROM DUAL;

SELECT * FROM  VUELO_AVION_PILOTO;

COMMIT;

CREATE TABLE TRIPULACION(  -------------------------------------------------------------------------------------TRIPULACION
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE TRIPULACION_SEQ;
CREATE TRIGGER INSERT_TRIPULACION
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;

INSERT ALL
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('ABDIEL',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('MARCOS',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('TAVO',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('AARON',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('CESAR',2)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;

COMMIT;

CREATE TABLE VUELO_TRIPULACION( -------------------------------------------------------------------VUELO_TRIPULACION
ID_VT NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_TRIPULACION NUMBER,
CONSTRAINT FK_IDVUELO_VT
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDTRIPULACION_VT
FOREIGN KEY (ID_TRIPULACION)
REFERENCES TRIPULACION (ID_TRIPULACION)
);

CREATE SEQUENCE VT_SEQ;
CREATE TRIGGER INSERT_VT
BEFORE INSERT ON VUELO_TRIPULACION FOR EACH ROW BEGIN
SELECT VT_SEQ.NEXTVAL INTO:NEW.ID_VT FROM DUAL;
END;

INSERT ALL
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (1,2)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (2,3)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (3,4)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (4,5)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (5,1)
SELECT *  FROM DUAL;

SELECT * FROM VUELO_TRIPULACION;

CREATE TABLE BOLETOS(  -----------------------------------------------------------------------------------------------------BOLETOS
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER(6,2),
CONSTRAINT FK_IDVUELO_BOLETOS
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
FOREIGN KEY (ID_CLIENTE)
REFERENCES LISTAS_CLIENTES (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;
CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;

INSERT ALL
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (1,3,9999.90)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (2,4,8999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (3,5,7599.90)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (4,1,4599.50)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (5,2,1999)
SELECT * FROM DUAL;

SELECT * FROM BOLETOS;

COMMIT;

INSERT INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('LORENZO',2);
SELECT * FROM TRIPULACION;

--PARA REVERTIR INSERCIÓN DE DATOS ANTES DE GUARDARLOS, ANTES DEL ULTIMO COMMIT, SE OCUPA LA FUNCIÓN DE ROLLBACK
ROLLBACK;

INSERT INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('LORENZO',2);   --LA SIGUIENTE VEZ QUE SE INSERTA SERÁ ID 7, YA NO 6, SE LLEVABA LA CUENTA

--ELIMINAR REGISTROS DE UNA TABLA (UN REGISTRO ESPECIFICO)
--DEBEMOS ELEGIR UNA COLUMNA O UN DATO COINCIDENTE PARA ELIMINAR DICHA FILA

DELETE FROM TRIPULACION WHERE NOMBRE='LORENZO';

-- MOSTRAR COLUMNAS ESPECIFICAS DE UNA TABLA
SELECT NOMBRE, ID_BASE FROM PILOTOS;  --SOLO MUESTRA NOMBRE Y ID
SELECT NOMBRE FROM PILOTOS;                     --SOLO MUESTRA LOS NOMBRES
SELECT * FROM PILOTOS ;                                   --MUESTRA TODO LO QUE CONTIENE UNA TABLA

--RELACIONANDO DATOS CON UNA CONDICION
SELECT HORASVIAJE, NOMBRE FROM PILOTOS WHERE HORASVIAJE > 400;

--RELACIONANDO DATOS CONCATENANDOLOS CON 'AND'
SELECT HORASVIAJE, NOMBRE, ID_BASE FROM PILOTOS WHERE HORASVIAJE > 300 AND ID_BASE=2;

-- UTILIZAMOS BETWEEN PARA BUSCAR RANGOS DE UN VALOR
SELECT * FROM PILOTOS WHERE HORASVIAJE BETWEEN 400 AND 900;

--BUSCAR VALORES SIMILARES
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%';

SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';

--FUNCIONES DE AGREGACION
SELECT MAX (HORASVIAJE) FROM PILOTOS;
SELECT MIN (HORASVIAJE) FROM PILOTOS;

--BUSCAR AL PILOTO CON MÁS HORAS DE VIAJE
SELECT * FROM PILOTOS WHERE HORASVIAJE = (SELECT MAX (HORASVIAJE) FROM PILOTOS);

COMMIT;

--ESTABLECER COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVIAJE =NULL;           --ACTUALIZAMOS LOS VALORES NULOS
SELECT * FROM PILOTOS;   --VERIFICAMOS QUE SE HAYAN ACTUALICADOS LOS VALORES
ROLLBACK;   --PODEMOS REGRESAR AL ESTADO DEL ULTIMO COMMIT CON ROLLBACK

--REALIZAR UN CONTEO PARA DETERMINADOS DATOS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVIAJE <= 400;

--OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (HORASVIAJE) FROM PILOTOS;

--REALIZAR LA SUMATORIA DE VALORES
SELECT SUM (HORASVIAJE)  FROM PILOTOS;

--FUNCIONES GROUP BY
--MOSTRAR CUANTOS ALUMNOS HAY POR CADA GENERO
SELECT * FROM ALUMNO;
SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP  BY SEXO;

--ORDENARLOS CON EL COMANDO DESC PARA PONER EN ORDEN DESCENDENTE

SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;
SELECT *  FROM ALUMNO ORDER BY NOMBRE ASC;


SELECT id_cliente FROM listas_clientes WHERE NOMBRE='AYLIN';
SELECT * FROM boletos WHERE id_cliente=1;
SELECT * FROM vuelo_tripulacion WHERE ID_VUELO=4;
SELECT * FROM tripulacion WHERE id_tripulacion=5;


select * from tripulacion where id_tripulacion in
(select id_tripulacion from vuelo_tripulacion where id_vuelo in
(select id_vuelo from boletos where id_cliente in
(select id_cliente from listas_clientes where nombre='EMMANUEL')));


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------JOINS
--CONSULTAS CON JOINS----------------------------------------

-- INNER JOIN
-- SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
-- LA COINCIDENCIA O EL CAMPO QUE LOS UNE (llave) LO MUESTRA JUSTO EN EL MEDIO
-- PARA QUE LOS JOINS PUEDAN REALIZARSE SE FACILITA MEDIANTE LAS PRIMARY KEYS Y LAS FOREIGN KEYS

--FORMA EXPLICITA
--SE INDICA EN INNER JOIN O JOIN

DESCRIBE PILOTOS;
DESCRIBE BASES;

SELECT * FROM PILOTOS  --SELECCIONAMOS TODO LO DE LA TABLA A
INNER JOIN BASES  --INDICAMOS LA UNION CON EL JOIN Y LA TABLA B--------------------------------------INNER JOIN
ON PILOTOS.ID_BASE = BASES.ID_BASE; --INDICAMOS DONDE SE VA A UNIR

SELECT * FROM PILOTOS 
JOIN BASES ---------------------------------------------------------------------------------------------------------------------------------JOIN
ON PILOTOS.ID_BASE = BASES.ID_BASE; 

--LEFT JOIN
--RIGHT JOIN

SELECT *  FROM BASES
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE= BASES.ID_BASE;

SELECT * FROM LISTAS_CLIENTES
LEFT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE = BOLETOS.ID_CLIENTE;

SELECT * FROM LISTAS_CLIENTES
RIGHT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE = BOLETOS.ID_CLIENTE;

SELECT * FROM PILOTOS  
LEFT JOIN BASES 
ON PILOTOS.ID_BASE = BASES.ID_BASE; 

--FULL JOIN
SELECT * FROM BASES 
FULL JOIN PILOTOS
ON PILOTOS.ID_BASE = BASES.ID_BASE; 


--INNER JOIN
SELECT * FROM LISTAS_CLIENTES
INNER JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE=BOLETOS.ID_CLIENTE;

--IDENTIFICAR LAS TABLAS CON ALIAS
SELECT C.NOMBRE FROM LISTAS_CLIENTES C
INNER JOIN BOLETOS B
ON C.ID_CLIENTE=B.ID_CLIENTE;

SELECT * FROM LISTAS_CLIENTES C
INNER JOIN BOLETOS B
ON C.ID_CLIENTE=B.ID_CLIENTE;

---------------------------------------------------------------------------------
--------------------------EJERCICIO 1 CON JOINS-----------------
---------------------------------------------------------------------------------
SELECT C.ID_CLIENTE, C.NOMBRE, B.ID_BOLETO FROM LISTAS_CLIENTES  C
INNER JOIN BOLETOS B
ON C.ID_CLIENTE = B.ID_CLIENTE; 

SELECT * FROM  VUELO_TRIPULACION
INNER JOIN BOLETOS
ON VUELO_TRIPULACION.ID_VUELO = BOLETOS.ID_VUELO; 


SELECT C.ID_CLIENTE, C.NOMBRE,V.ID_TRIPULACION, T.NOMBRE FROM LISTAS_CLIENTES  C
INNER JOIN BOLETOS B
ON C.ID_CLIENTE = B.ID_CLIENTE
INNER JOIN VUELO_TRIPULACION V
ON V.ID_VUELO = B.ID_VUELO
INNER JOIN TRIPULACION T
ON  V.ID_TRIPULACION= T.ID_TRIPULACION;

SELECT C.ID_CLIENTE, C.NOMBRE,V.ID_TRIPULACION, T.NOMBRE FROM LISTAS_CLIENTES  C
INNER JOIN BOLETOS B
ON C.ID_CLIENTE = B.ID_CLIENTE
INNER JOIN VUELO_TRIPULACION V
ON V.ID_VUELO = B.ID_VUELO
INNER JOIN TRIPULACION T
ON  V.ID_TRIPULACION= T.ID_TRIPULACION WHERE C.NOMBRE ='AYLIN';

---------------------------------------------------------------------------------
--------------------------EJERCICIO 2 CON JOINS-----------------
---------------------------------------------------------------------------------
-- Buscar Id del avion, modelo y destino del vuelo, del piloto con más horas de vuelo

SELECT P.NOMBRE, P.HORASVIAJE, VAP.ID_AVION, V.DESTINO, A.MODELO FROM  PILOTOS P
INNER JOIN VUELO_AVION_PILOTO VAP
ON P.ID_PILOTO = VAP.ID_PILOTO
INNER JOIN VUELO V
ON V.ID_VUELO =VAP.ID_VUELO
INNER JOIN AVIONES A
ON A.ID_AVION = VAP.ID_AVION;

SELECT P.NOMBRE, P.HORASVIAJE, VAP.ID_AVION, V.DESTINO, A.MODELO FROM  PILOTOS P
INNER JOIN VUELO_AVION_PILOTO VAP
ON P.ID_PILOTO = VAP.ID_PILOTO
INNER JOIN VUELO V
ON V.ID_VUELO =VAP.ID_VUELO
INNER JOIN AVIONES A
ON A.ID_AVION = VAP.ID_AVION WHERE P.HORASVIAJE=(SELECT MAX (HORASVIAJE)FROM PILOTOS);

commit;