-- Con dos guiones se puede comentar

/*Podemos poner comentarios de multiples líneas
SQL - Structured Query Languuage, lenguaje de consulta estructurado
Es un lenguaje para actualizar, obtener y calcular información
en bases de datos relacionales.
*/

-- Base de datos - conjunto de datos organizados entre sí, almacenados
-- en tablas

/*La estructura de las tablas sería de la siguiente manera:
Llave primaria -- Id - Toda tabla debe llevar su llave primaria 
Llave foránea -- Pueden llevar llave foránea la cual es una llave primaria que viene de otra tabla
Tipo de Datos (caracteres o numéricos, tipo fecha)

NUMBER - Datos numércos
NVARCHAR2 - Permite entrada de datos de caracteres alfabéticos y también caracteres especiales
DATE - Utilizado para manejo de fecha y hora

-- ALUMNO
-- MATRICULA O ID
-- NOMBRE
-- FECHA DE NACIMIENTO
-- SEXO
-- GRADO
-- STATUS DE ACTIVO O INACTIVO
*/

-- CREANDO TABLA DE ALUMNO
-- La sintaxis puede ir en mayusculas o minisculas

CREATE TABLE ALUMNO ( --INDICAMOS NOMBRE DE LA TABLA 
ID_ALUMNO NUMBER PRIMARY KEY, -- COMENZAMOS CON LLAVE PRIMARIA
NOMBRE NVARCHAR2 (30), -- INDICAMOS OTRO CAMPO Y EL TIPO DE DATO
FECHANAC DATE,
SEXO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 (20),
STATUS NUMBER
);

-- Si quiero ver la estructra de una tabla
-- Se  utiliza DESCRIBE y el noombre de la talba

DESCRIBE ALUMNO;

-- CREAR UNA TABLA CON LA CARRERA DE LOS ALUMNOS

CREATE TABLE CARRERAS (
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
AREA NVARCHAR2 (30),
NUM_SEMESTRES NUMBER,
NUM_MATERIAS NUMBER,
CREDITOS NUMBER
);

DESCRIBE CARRERAS;

CREATE TABLE CARRERAS_ALUMNOS(
ID_CA NUMBER PRIMARY KEY,
ID_CARRERA NUMBER,
ID_ALUMNO NUMBER
);

-- Entidades Fuertes
-- Son aquellas que tienen sus datos completos y no dependen
-- de otra entidad o tabla para existir

-- Entidades débiles
-- Son aquellas que reciben una llave foránnea y esto las hace dependientes
-- de otras tablas para existir

-- AGREGANDO RESTRICCIONES A UNA TABLA
-- Las restricciones deben llevar un nombre y se identifican por el comando
-- "CONSTRAINT"

-- En la tabla ALUMNO vamos a agregar una restricción en el sexo
-- para que solo podamos introducir 'MASCULINO' o 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_SEXO CHECK (SEXO IN ('MASCULINO','FEMENINO'));

DESCRIBE ALUMNO;

-- CREANDO UNA RESTRICCION EN LA TABLA CARRERAS
-- PARA NO REPETIR NOMBRES
-- UNIQUE, para agregar una restricción única en un registro

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE UNIQUE (NOMBRE);

-- AGREGANDO UNA LLAVE FORANEA
-- Una llave foranea tambien es una restriccion porque vamos a especificar de donde
-- proviene dicha llave.

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO 
FOREIGN KEY (ID_ALUMNO) -- QUIEN RECIBE (QUE COLUMNA)
REFERENCES ALUMNO (ID_ALUMNO); --QUIEN  DA (DE QUE TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA 
FOREIGN KEY (ID_CARRERA) -- QUIEN RECIBE (QUE COLUMNA)
REFERENCES CARRERAS (ID_CARRERA); --QUIEN  DA (DE QUE TABLA Y QUE COLUMNA)

-- INSERCION DE DATOS INDIVIDUALES

DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES 
(1,'AYLIN','19/04/1995','FEMENINO','AAUL092839GGRBRL05','8VO SEMESTRE',1);

INSERT INTO ALUMNO VALUES 
(2,'ALEX','08/05/1998','MASCULINO','ALEX980508GGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(3,'ALEJANDRO G','25/04/1997','MASCULINO','ALEG970425GGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(4,'ABDIEL','30/12/1997','MASCULINO','ABDI971230GGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(5,'MARCOS','19/05/1996','MASCULINO','ALEG970425GGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(6,'EDUARDO','01/11/1995','MASCULINO','ALEG970425GGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(7,'TAVO','13/06/1998','MASCULINO','ALEG970425GGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(10,'CESAR','14/02/1997','MASCULINO','SOCJ970214HGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(8,'AARON','13/06/1997','MASCULINO','SOCJ970214HGRBRL05','8VO SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(9,'EMMANUEL','28/10/1994','MASCULINO','SOCJ970214HGRBRL05','8VO SEMESTRE',1);

-- VISUALIZANDO DATOS DESDE LA CONSOLA

SELECT * FROM ALUMNO;

DESCRIBE CARRERAS 

-- INSERCION DE DATOS EN LA TABLA CARRERAS

INSERT INTO CARRERAS VALUES 
(1,'ING EN SISTEMAS','EXACTAS',8,20,300);

INSERT INTO CARRERAS VALUES 
(2,'MEDICINA','CIENCIAS SALUD',10,20,300);
INSERT INTO CARRERAS VALUES 
(3,'DERECHO','HUMANIDADES',8,20,300);
INSERT INTO CARRERAS VALUES 
(4,'NUTRICION','CIENCIAS SALUD',8,20,300);
INSERT INTO CARRERAS VALUES 
(5,'ADMINISTRACION','ECONOMICO AD',8,20,300);

SELECT * FROM CARRERAS;

-- Para que los registros se guarden en la base de datos
-- usar el comando COMMIT

COMMIT;


-- Inserción de datos en la tabla relacional CARRERAS_ALUMNOS

INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,1,3);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,5,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,3,5);

SELECT * FROM CARRERAS_ALUMNOS;

-- AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
-- PODEMOS ESPECIFICAR QUE VAMOS A AGERGAR UNA COLUMNA CON ADD COLUMN
-- O SI NO ESPECIFICAMOS AUTOMATICAMENTE AGREGA UNA COLUMNA INDICANDO EL NOMBRE

ALTER TABLE CARRERAS ADD PRESUPUESTO_ANUAL NUMBER (5,2); 
-- SE INDICAN LA LONGITUD DEL NUMERO EN LOS CUALES SON 5 DIGITOS Y 2 SON DECIMALES
-- TENDRIAMOS ASÍ VALORES DESDE 999.99 A 999.99

DESCRIBE CARRERAS;

-- MODIFICAR TIPO DE DATOS DE LA COLUMNA SIEMPRE Y CUANDO NO TENGA DATOS INSERTADOSAL

ALTER TABLE CARRERAS MODIFY PRESUPUESTO_ANUAL NVARCHAR2(10);

DESCRIBE CARRERAS;

-- RENOMBRAR UNA COLUMNA
ALTER TABLE CARRERAS RENAME COLUMN PRESUPUESTO_ANUAL TO PRESUPUESTO_MENSUAL;

-- EJERCICIO
-- CREAR TABLA QUE SE LLAME TUTORES
-- ID DEL TUTOR, NOMBRE DEL TUTOR, CLAVE DEL TUTOR
-- PONERLE RESTRICCION A LA CLAVE DEL TUTOR A B C D
-- INSERTAR 10 REGISTROS

-- CREAR UNA TABLA RELACIONAL QUE SEA ALUMNOS_TUTORES
-- ID DE LA TABLA, ID DEL ALUMNO, ID DEL TUTOR
-- INSERTAR 5 REGISTROS

CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
CLAVE_TUT NUMBER
);

ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVETUT CHECK (CLAVE_TUT IN ('A','B','C','D'));

ALTER TABLE TUTORES MODIFY CLAVE_TUT NVARCHAR2 (1);
ALTER TABLE TUTORES DROP CONSTRAINT CHECK_CLAVETUT;


INSERT INTO TUTORES VALUES (1,'JOSE RODRIGUEZ RUIZ','A');

INSERT INTO TUTORES VALUES (2,'MARIA LOPEZ','B');
INSERT INTO TUTORES VALUES (3,'ROBERTO CARLO ANAYA','C');
INSERT INTO TUTORES VALUES (4,'MARIBEL LOPEZ TREJO','D');
INSERT INTO TUTORES VALUES (5,'MARISOL DOMINGUEZ','B');
INSERT INTO TUTORES VALUES (6,'ANTONIO ESTRADA LUNA','D');
INSERT INTO TUTORES VALUES (7,'LUIS FELIPE ARROYO','A');
INSERT INTO TUTORES VALUES (8,'JUANA VALDEZ PRADO','C');
INSERT INTO TUTORES VALUES (9,'BRANDON MOCTEZUMA','A');
INSERT INTO TUTORES VALUES (10,'AXEL RAMON CASTRO','C');

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER
);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_ALUMNO2 
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO); 

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_ID_TUTORES
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR); 

INSERT INTO ALUMNOS_TUTORES VALUES (1,1,1);
INSERT INTO ALUMNOS_TUTORES VALUES (2,2,2);
INSERT INTO ALUMNOS_TUTORES VALUES (3,1,3);
INSERT INTO ALUMNOS_TUTORES VALUES (4,5,4);
INSERT INTO ALUMNOS_TUTORES VALUES (5,3,5);

-- ELIMINAR UNA TABLA CON TODO Y SUS DATOS
DROP TABLE ALUMNOS_TUTORES;

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER,
CONSTRAINT FK_ID_TUTORES
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR),
CONSTRAINT FK_ID_ALUMNO2 
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO)
);


-- CREANDO SECUENCIAS
-- Se emplea para generar valores de numeros enteros
-- Estos pueden ser consecutivos (incremento de 1)
-- O como un incremento de más valores
-- Se utiliza para generar las llaves primarias y asegurarnos
-- que los valores no se repitan

-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES
CREATE SEQUENCE ALUMNO_SEQ -- CREAMOS SECUANCIA Y SU NOMBRE
START WITH 11 -- EL VALOR EN EL QUE INICIA LA SECUENCIA
INCREMENT BY 1 -- INCREMETA EL VALOR DE LA SECUENCIA
MAXVALUE 999 -- INDICAMOS EL VALOR MAXIMO PARA LA SECUENCIA
MINVALUE 1 -- INDICAMOS EL VALOR MINIMO DE LA SECUENCIA
CYCLE; -- INDICAMOS SI LA SECUENCIA UNA VEZ LLEGADO A SU MAXVALUE
        -- INICIE DE NUEVO
-- SI NO INDICAMOS EL CYCLE, POR DEFAULT LA SECUENCIA CONTINUARIA


--CREAR SECUENCIA CON LOS VALORES POR DEFECTO
CREATE SEQUENCE ALUMNOS_TUTORES_SEQ;

-- TRIGGER (DISPARADOR) - EJECUTA UNA ACCION O DESENCADENA UN EVENTO
CREATE TRIGGER INSERT_ALUMNOS -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER 
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

CREATE TRIGGER INSERT_ALUMNOS -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL; --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

INSERT INTO ALUMNO VALUES 
(2,'ROMAN','08/05/1998','MASCULINO','ALEX980508GGRBRL05','8VO SEMESTRE',1);

DESCRIBE ALUMNO;

-- CREAR EL TRIGGER PARA ALUMNOS TUTORES
CREATE TRIGGER INSERT_ALUMNOS_TUTORES -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNOS_TUTORES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER 
SELECT ALUMNOS_TUTORES_SEQ.NEXTVAL INTO:NEW.ID_AT FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

-- OTRA FORMA DE INSERCIÓN - INSERCIÓN MASIVA
INSERT ALL
INTO ALUMNOS_TUTORES(ID_ALUMNO, ID_TUTOR) VALUES(1,2)
INTO ALUMNOS_TUTORES(ID_ALUMNO, ID_TUTOR) VALUES(2,2)
INTO ALUMNOS_TUTORES(ID_ALUMNO, ID_TUTOR) VALUES(3,1)
INTO ALUMNOS_TUTORES(ID_ALUMNO, ID_TUTOR) VALUES(4,3)
INTO ALUMNOS_TUTORES(ID_ALUMNO, ID_TUTOR) VALUES(5,3)
SELECT * FROM DUAL;

COMMIT;

CREATE TABLE ASUNTOS (
ID_EXP NUMBER PRIMARY KEY,
ID_CLIENTE NUMBER,
ID_PROCU NUMBER,
FECHAIN DATE,
FECHAFIN DATE,
ESTADO NVARCHAR2 (10)
);

CREATE TABLE CLIENTES (
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DNI NVARCHAR2 (20),
DIRECCION NVARCHAR2 (60)
);

CREATE TABLE PROCURADORES(
ID_PROCU NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DNI NVARCHAR2 (20),
DIRECCION NVARCHAR2 (60)
);

ALTER TABLE ASUNTOS ADD CONSTRAINT CHECK_ESTADO CHECK (ESTADO IN ('TRAMITE','ARCHIVADO'));

ALTER TABLE ASUNTOS ADD CONSTRAINT FK_ID_CLIENTE 
FOREIGN KEY (ID_CLIENTE) -- QUIEN RECIBE (QUE COLUMNA)
REFERENCES CLIENTES (ID_CLIENTE); --QUIEN  DA (DE QUE TABLA Y QUE COLUMNA)

ALTER TABLE ASUNTOS ADD CONSTRAINT FK_ID_PROCU
FOREIGN KEY (ID_PROCU)
REFERENCES PROCURADORES (ID_PROCU);

CREATE SEQUENCE ASUNTOS_SEQ;
CREATE SEQUENCE CLIENTES_SEQ;
CREATE SEQUENCE PROCURADORES_SEQ;

CREATE TRIGGER INSERT_ASUNTOS -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ASUNTOS FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER 
SELECT ASUNTOS_SEQ.NEXTVAL INTO:NEW.ID_EXP FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

CREATE TRIGGER INSERT_CLIENTES -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER 
SELECT CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

CREATE TRIGGER INSERT_PROCURADORES -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON PROCURADORES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER 
SELECT PROCURADORES_SEQ.NEXTVAL INTO:NEW.ID_PROCU FROM DUAL; -- SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

DESCRIBE ASUNTOS;

INSERT ALL
INTO CLIENTES (NOMBRE,DNI,DIRECCION) VALUES('ROBERTO SANCHEZ','ABC123XDXD','AV PUEBLA')
INTO CLIENTES (NOMBRE,DNI,DIRECCION) VALUES('MARIA LOZANO','28373SOD0K','AV MEXICO')
INTO CLIENTES (NOMBRE,DNI,DIRECCION) VALUES('MARISOL DOMINGUEZ','AIMEP3XDXD','AV NEZA')
INTO CLIENTES (NOMBRE,DNI,DIRECCION) VALUES('MARIBEL LOPEZ TREJO','TERNURA68','AV TERNURE')
INTO CLIENTES (NOMBRE,DNI,DIRECCION) VALUES('PEDRO PEREZ','PEPE0283JD','AV CANCUN')
SELECT * FROM DUAL;

INSERT ALL
INTO PROCURADORES (NOMBRE,DNI,DIRECCION) VALUES ('KARLA RODRIGUEZ','KARO9283749','CALLE UNO')
INTO PROCURADORES (NOMBRE,DNI,DIRECCION) VALUES ('JOSE LUIS ANAYA','ANJOSE9238','CALLE DOS')
INTO PROCURADORES (NOMBRE,DNI,DIRECCION) VALUES ('LUIS MIGUEL SOL','ELSOL09382','CALLE TRES')
INTO PROCURADORES (NOMBRE,DNI,DIRECCION) VALUES ('LAURA SANCHEZ','LASA027492','CALLE CUATRO')
INTO PROCURADORES (NOMBRE,DNI,DIRECCION) VALUES ('GUADALUPE CONTRERAS','GUACO23975','CALLE CINCO')
SELECT * FROM DUAL;

INSERT ALL
INTO ASUNTOS (ID_CLIENTE,ID_PROCU,FECHAIN,FECHAFIN,ESTADO) VALUES (1,5,'12/12/2022','24,01,2023','TRAMITE')
INTO ASUNTOS (ID_CLIENTE,ID_PROCU,FECHAIN,FECHAFIN,ESTADO) VALUES (2,4,'05/03/2006','11/09/2016','ARCHIVADO')
INTO ASUNTOS (ID_CLIENTE,ID_PROCU,FECHAIN,FECHAFIN,ESTADO) VALUES (3,3,'22/03/1992','24,03,2001','ARCHIVADO')
INTO ASUNTOS (ID_CLIENTE,ID_PROCU,FECHAIN,FECHAFIN,ESTADO) VALUES (4,2,'14/02/1997','14,02,2023','TRAMITE')
INTO ASUNTOS (ID_CLIENTE,ID_PROCU,FECHAIN,FECHAFIN,ESTADO) VALUES (5,1,'28/09/2014','11,04,2019','ARCHIVADO')
SELECT * FROM DUAL;

COMMIT;

--------------------------------------------------------------------------------------------------------------------

CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE SOCIO_SEQ;

CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;


CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
NUM_AMARRE NUMBER,
CUOTA NUMBER (6,2)
);

CREATE SEQUENCE BARCO_SEQ;

CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO (ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO (ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;


CREATE TABLE SALIDAS_BARCO(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO (ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON (ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS_BARCO FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;

DESCRIBE SOCIO;

INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AYLIN','XALAPA','2282330908')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEX','XALAPA','2281072635')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEJANDRO','CDMX','3023079497')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EMMANUEL','CDMX','5630345103')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;

SELECT * FROM SOCIO;

INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ABDIEL','XALAPA','2282535827')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('MARCOS','XALAPA','2283054341')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('TAVO','ACAPULCO','7441198412')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AARON','XALAPA','2283443722')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('CESAR','ACAPULCO','7443838589')
SELECT * FROM DUAL;

SELECT * FROM PATRON;

DESCRIBE BARCO;
INSERT ALL
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA NIÑA', 11, 800.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA PINTA', 12, 900.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('ST. MARIE', 13, 1000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('MINI TITANIC', 14, 2000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('POSEIDON', 15, 5000.50)
SELECT * FROM DUAL;

SELECT * FROM BARCO;

DESCRIBE SOCIOS_BARCO;

INSERT ALL
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (1,1)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (2,2)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (3,3)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (4,4)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (5,5)
SELECT * FROM DUAL;

SELECT * FROM SOCIOS_BARCO;

DESCRIBE SALIDAS_BARCO;

INSERT ALL
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('VERACRUZ',TO_DATE('20/01/2023 01:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('VILLAHERMOSA',TO_DATE('21/01/2023 13:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('CAMPECHE',TO_DATE('22/01/2023 14:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('YUCATAN',TO_DATE('23/01/2023 15:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('CANCUN',TO_DATE('24/01/2023 16:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
SELECT * FROM DUAL;

INSERT INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('COZUMEL',TO_DATE('25/01/2023 12:00:00','DD-MM-YYYY HH24:MI:SS'),1,1);

SELECT * FROM SALIDAS_BARCO;

-- CONSULTAR HORARIO Y FECHA
SELECT ID_SALIDA,DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS_BARCO;

-- CONSULTAR UNICAMENTE HORARIO DE SALIDA
SELECT ID_SALIDA,DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS_BARCO;

COMMIT;


------------------------------------------------------------------------------------------------
--EJERCICIO AEROLINEA


--ENTIDADES FUERTES

CREATE TABLE BASES (
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2 (20)
);

CREATE SEQUENCE BASES_SEQ;

CREATE TRIGGER INSERT_BASES BEFORE INSERT ON BASES FOR EACH ROW BEGIN SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL; END; 

INSERT INTO BASES (TIPO) VALUES ('MANTENIMIENTO');
INSERT INTO BASES (TIPO) VALUES ('DESCANSO');

CREATE TABLE VUELO(
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2(30),
DESTINO NVARCHAR2(30),
HORARIOVIAJE DATE
);

CREATE SEQUENCE VUELO_SEQ;

CREATE TRIGGER INSERT_VUELO BEFORE INSERT ON VUELO FOR EACH ROW BEGIN SELECT VUELO_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL; END;
DROP TRIGGER INSERT_VUELO;

INSERT ALL 
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('MEXICO','JAPON',TO_DATE ('20/01/2023 01:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('CDMX','MEDELLIN',TO_DATE ('21/01/2023 02:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('CDMX','COSTA RICA',TO_DATE ('22/01/2023 03:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('MONTERREY','TIJUANA',TO_DATE ('23/01/2023 04:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('PUEBLA','CANCUN',TO_DATE ('24/01/2023 05:30:00', 'DD-MM-YYYY HH24:MI:SS'))
SELECT * FROM DUAL;

SELECT * FROM VUELO;

CREATE TABLE LISTAS_CLIENTES(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
TELEFONO NVARCHAR2 (10),
DIRECCION NVARCHAR2 (30)
);

CREATE SEQUENCE LISTAS_CLIENTES_SEQ;

CREATE TRIGGER INSERT_LISTAS_CLIENTES BEFORE INSERT ON LISTAS_CLIENTES FOR EACH ROW BEGIN SELECT LISTAS_CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL; END; 

INSERT ALL
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AYLIN','XALAPA','2282330908')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEX','XALAPA','2281072635')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEJANDRO','CDMX','3023079497')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EMMANUEL','CDMX','5630345103')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;


-- ENTIDADES DEBILES

CREATE TABLE AVIONES (
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2 (20),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES FOREIGN KEY (ID_BASE) REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE AVIONES_SEQ;

CREATE TRIGGER INSERT_AVIONES BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL; END;


CREATE TABLE PILOTOS(
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
HORASVIAJE NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS FOREIGN KEY (ID_BASE) REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN(2))
);

CREATE SEQUENCE PILOTOS_SEQ;

CREATE TRIGGER INSERT_PILOTOS BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL; END;

CREATE TABLE VUELO_AVION_PILOTO(
ID_VAP NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_AVION NUMBER,
ID_PILOTO NUMBER,
CONSTRAINT FK_IDVUELO_VAP FOREIGN KEY (ID_VUELO) REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDAVION_VAP FOREIGN KEY (ID_AVION) REFERENCES AVIONES (ID_AVION),
CONSTRAINT FK_IDPILOTO_VAP FOREIGN KEY (ID_PILOTO) REFERENCES PILOTOS (ID_PILOTO)
);

CREATE SEQUENCE VAP_SEQ;

CREATE TRIGGER INSERT_VAP BEFORE INSERT ON VUELO_AVION_PILOTO FOR EACH ROW BEGIN SELECT VAP_SEQ.NEXTVAL INTO:NEW.ID_VAP FROM DUAL; END;

CREATE TABLE TRIPULACION(
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_TRIPULACION FOREIGN KEY (ID_BASE) REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN(2))
);

CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL; END;

CREATE TABLE VUELO_TRIPULACION(
ID_VT NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_TRIPULACION NUMBER,
CONSTRAINT FK_IDVUELO_VT FOREIGN KEY (ID_VUELO) REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDTRIPULACION_VT FOREIGN KEY (ID_TRIPULACION) REFERENCES TRIPULACION (ID_TRIPULACION)
);

CREATE SEQUENCE VT_SEQ;

CREATE TRIGGER INSERT_VT BEFORE INSERT ON VUELO_TRIPULACION FOR EACH ROW BEGIN SELECT VT_SEQ.NEXTVAL INTO:NEW.ID_VT FROM DUAL; END;

CREATE TABLE BOLETOS(
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER (6,2),
CONSTRAINT FK_IDVUELO_BOLETOS FOREIGN KEY (ID_VUELO) REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS FOREIGN KEY (ID_CLIENTE) REFERENCES LISTAS_CLIENTES (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;

    CREATE TRIGGER INSERT_BOLETOS BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL; END;

DROP TRIGGER INSERT_BOLETOS;

COMMIT;


-- REGISTRO DE AVIONES

INSERT ALL
INTO AVIONES (MODELO, ID_BASE) VALUES ('BOEING',1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('AIRBUS',1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('JET',1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('VOLVO',1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('JET',1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('Embraer E-Jet',1)
SELECT * FROM DUAL;

-- REGISTRO DE PILOTOS

INSERT ALL
INTO PILOTOS (NOMBRE, HORASVIAJE,ID_BASE) VALUES ('HUGO',300,2)
INTO PILOTOS (NOMBRE, HORASVIAJE,ID_BASE) VALUES ('PACO',600,2)
INTO PILOTOS (NOMBRE, HORASVIAJE,ID_BASE) VALUES ('LUIS',400,2)
INTO PILOTOS (NOMBRE, HORASVIAJE,ID_BASE) VALUES ('PEDRO',850,2)
INTO PILOTOS (NOMBRE, HORASVIAJE,ID_BASE) VALUES ('JAYRO',330,2)
SELECT * FROM DUAL;


-- REGISTRO VUELO AVION PILOTO

INSERT ALL
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (1,3,2)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (2,4,1)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (3,1,4)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (4,2,5)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (5,5,3)
SELECT * FROM DUAL;

-- REGISTRO TRIPULACION

INSERT ALL
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('ABDIEL',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('MARCOS',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('TAVO',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('AARON',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('CESAR',2)
SELECT * FROM DUAL;

COMMIT;

-- REGISTRO DE VUELO TRIPULACION

INSERT ALL
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (1,2)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (2,3)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (3,4)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (4,5)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (5,1)
SELECT * FROM DUAL;

-- REGISTRO DE BOLETOS

INSERT ALL
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES (1,3,9999.99)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES (2,4,8999.99)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES (3,5,7599.99)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES (4,1,4999.50)
INTO BOLETOS (ID_VUELO,ID_CLIENTE,COSTO) VALUES (5,2,5500)
SELECT * FROM DUAL;

COMMIT;

-- REVERTIR LA INSERCIÓN DE DATOS ANTES DE GUARDARLOS
-- NOS LLEVA AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;

-- ELIMINAR REGISTROS DE UNA TABLA (UN REGISTRO ESPECIFICO)
-- DEBEMOS ELEGIR UNA COLUMNA O UN DATO COINCIDENTE PARA ELIMINAR DICHA FILA

DELETE FROM TRIPULACION WHERE NOMBRE='EUGENIO';
SELECT * FROM TRIPULACION;

-- MOSTRAR COLUMNAS ESPECIFICAS DE UNA TABLA
SELECT NOMBRE FROM PILOTOS;

-- LA CONSULTA DE TODOS LOS DATOS SE INDICA CON *
SELECT * FROM PILOTOS;

-- RELACIONANDO DATOS CON UNA CONDICION
SELECT HORASVIAJE, NOMBRE FROM PILOTOS WHERE HORASVIAJE>400;

-- RELACIONANDO DATOS CONCATENANDOLOS CON 'AND'
SELECT HORASVIAJE, NOMBRE, ID_BASE FROM PILOTOS WHERE HORASVIAJE>300 AND ID_BASE=2;

-- UTILIZAMOS BETWEEN PARA BUSCAR RANGOS DE UN VALOR
SELECT * FROM PILOTOS WHERE HORASVIAJE BETWEEN 400 AND 900;

-- BUSCAR VALORES SIMILARES
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%';
SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';

-- FUNCIONES DE AGREGACIÓN
SELECT MAX(HORASVIAJE) FROM PILOTOS;
SELECT MIN(HORASVIAJE) FROM PILOTOS;
--BUSCAR AL PILOTO CON MÁS HORAS DE VIAJE
SELECT * FROM PILOTOS WHERE HORASVIAJE = (SELECT MAX(HORASVIAJE) FROM PILOTOS);

COMMIT;

-- ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVIAJE=NULL; -- Actualizamos los valores a nulos
SELECT * FROM PILOTOS; --Verificamos que se hayan actualizado los valores
ROLLBACK; -- Podemos regresar al estado del ultimo commit con rollback

-- REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVIAJE<400;

-- OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA (HORASVIAJE)
SELECT AVG (HORASVIAJE) FROM PILOTOS;

-- SUMATORIA DE VALORES
SELECT SUM (HORASVIAJE) FROM PILOTOS;

-- FUNCIONES GROUP BY
-- MOSTRAR CUANTOS ALUMNOS HAY POR CADA GENERO
SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP BY SEXO;

SELECT * FROM ALUMNO;

-- ORDENARLOS CON EL COMANDO DESC PARA PONER EN ORDEN DESCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

-- ORDENARLOS CON EL COMANDO ASC PARA PONER EN ORDEN ASCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;



-- BUSCAR LOS DATOS DE LA TRIPULACION EN EL VUELO DONDE EL CLIENTE HAYA SIDO ='NOMBRE'

SELECT * FROM TRIPULACION WHERE ID_TRIPULACION IN -- Buscar los datos de la tripulacion
(SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO IN -- Identificar al tripulante que estuvo en el vuelo
(SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE IN -- Identificar el vuelo del cliente
(SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE='EMMANUEL'))); -- Identificamos al cliente


-- CONSULTAS CON JOINS

-- INNER JOING
-- SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
-- LA COINCIDENCIA O EL CAMPO QUE LOS UNE (LLAVE) LO MUESTRA JUSTO EN EL MEDIO
-- PARA QUE LOS JOINS PUEDAN REALIZARSE SE FACILITA MEDIANTE LAS PRIMARY KEYS Y LAS FOREIGN KEYS

--FORMA EXPLICITA
--SE INDICA EN INNER JOIN O JOIN 

DESCRIBE PILOTOS;
DESCRIBE BASES;

SELECT * FROM PILOTOS -- SELECCIONAMOS TODO DE UNA TABLA A
INNER JOIN BASES -- INDICAMOS LA UNION CON EL JOIN Y LA TABLA B
ON PILOTOS.ID_BASE=BASES.ID_BASE; -- INDICAMOS DONDE SE VAN A UNIR

SELECT * FROM PILOTOS -- SELECCIONAMOS TODO DE UNA TABLA A
JOIN BASES -- INDICAMOS LA UNION CON EL JOIN Y LA TABLA B
ON PILOTOS.ID_BASE=BASES.ID_BASE; -- INDICAMOS DONDE SE VAN A UNIR

--LEFT JOIN
--RIGHT JOIN

SELECT * FROM BASES
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

SELECT * FROM LISTAS_CLIENTES
LEFT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE=BOLETOS.ID_CLIENTE;

--FULL JOIN

SELECT * FROM BASES
FULL JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

--IDENTIFICAR LAS TABLAS CON ALIAS
SELECT C.NOMBRE,B.ID_VUELO FROM LISTAS_CLIENTES C
INNER JOIN BOLETOS B
ON C.ID_CLIENTE=B.ID_CLIENTE;


SELECT A.ID_TRIPULACION,A.NOMBRE,B.ID_BASE FROM TRIPULACION A
INNER JOIN BASES B
ON A.ID_BASE=B.ID_BASE
INNER JOIN VUELO_TRIPULACION C
ON A.ID_TRIPULACION=C.ID_TRIPULACION
INNER JOIN BOLETOS D
ON C.ID_VUELO=D.ID_VUELO
INNER JOIN LISTAS_CLIENTES E
ON D.ID_CLIENTE=E.ID_CLIENTE WHERE E.NOMBRE='AYLIN';

--BUSCAR ID DEL AVION, MODELO Y DESTINO DEL VUELO DEL PILOTO CON MAS HORAS DE VUELO
SELECT A.ID_AVION,A.MODELO,C.DESTINO FROM AVIONES A
INNER JOIN VUELO_AVION_PILOTO B
ON A.ID_AVION=B.ID_AVION
INNER JOIN VUELO C
ON B.ID_VUELO=C.ID_VUELO
INNER JOIN PILOTOS D
ON B.ID_PILOTO=D.ID_PILOTO WHERE D.HORASVIAJE=(SELECT MAX (HORASVIAJE) FROM PILOTOS);

COMMIT;























