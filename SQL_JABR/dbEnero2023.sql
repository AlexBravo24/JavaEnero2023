-- Con dos guiones podemos poner un comentario

/*Podemos poner comentarios de multiples lineas
SQL- Lenguaje de consulta estructurado (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en
bases de datos relacionales
*/

-- Base de datos - conjunto de datos organizados entre sí, almacenados
--en tablas

/*La estructura de las tablas sería de la siguiente manera
-Llave Primaria -- Id - Toda tabla debe llevar su llave primaria
-LLave foranea -- Pueden llevar llave forane, la cual es
una llave primaria que proviene de otra tabla
-Tipo de Datos (caracteres o numericos, tipo fecha)

NUMBER - Datos numéricos
NVARCHAR2 - Permite entrada de datos de caracteres alfabeticos
y también caracteres especiales
DATE - Utilizado para manejo de fecha y hora

-- ALUMNO
-- MATRICULA O ID
-- NOMBRE
-- FECHA DE NACIMIENTO
-- SEXO
-- GRADO
-- STATUS DE ACTIVO O INACTIVO
-- CURP
*/

-- Creando la tabla de Alumno
--La sintaxis puede ir en mayusculas o minusculas

CREATE TABLE ALUMNO( -- Indicamos el nombre de la tabla
ID_ALUMNO NUMBER PRIMARY KEY, -- Comenzamos con su llave primaria
NOMBRE NVARCHAR2 (30), -- Indicamos otro dato y el tipo de dato
FECHANAC DATE,
SEXO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 (20),
STATUS NUMBER
);

-- Si quiero ver la estructura de una tabla
-- Se utiliza DESCRIBE y el nombre de la tabla

DESCRIBE ALUMNO;

-- Crear una tabla con la carrera de los Alumnos

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
NUM_SEMESTRES NUMBER,
NUM_MATERIAS NUMBER,
CREDITOS NUMBER
);

DESCRIBE CARRERAS;

CREATE TABLE CARRERAS_ALUMNOS (
ID_CA NUMBER PRIMARY KEY,
ID_CARRERA NUMBER,
ID_ALUMNO NUMBER
);

-- Entidades Fuertes
-- Son aquellas que tienen sus datos completos y no dependen
-- de otra entidad o tabla para existir

-- Entidades debiles
-- Son aquellas que reciben una llave foranea y esto las hace dependientes
-- de otras tablas para existir

-- AGREGANDO RESTRICCIONES A UNA TABLA
-- Las restricciones deben llevar un nombre y se identifican por el
--comando 'CONSTRAINT'

-- En la tabla ALUMNO, vamos a agregar una restricción en el sexo
-- para que solo podamos introducir 'MASCULINO' o 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_SEXO CHECK
(SEXO IN ('MASCULINO','FEMENINO'));

ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_SEXO;

DESCRIBE ALUMNO;

-- CREANDO UNA RESTRICCION EN LA TABLA CARRERAS
-- Para no repetir nombres
-- UNIQUE, para agregar una restricció única en un registro

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

-- AGREGANDO UNA LLAVE FORANEA
-- Una llave foranea también es una restriccion, porque
-- vamos a especificar de donde proviene dicha llave

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES ALUMNO (ID_ALUMNO); -- QUIEN DA (DE QUE TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES CARRERAS (ID_CARRERA); -- QUIEN DA (DE QUE TABLA Y QUE COLUMNA)

-- INSERCIÓN DE DATOS INDIVIDUALES

DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES
(1,'AYLIN','19/04/1995','FEMENINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(2,'ALEX','08/05/1998','MASCULINO','AAAL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'ALEJANDRO G','25/04/1997','MASCULINO','AAUL0899623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'ABDIEL','30/12/1997','MASCULINO','ASSL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'MARCOS','19/05/1996','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(6,'EDUARDO','01/11/1995','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(7,'TAVO','13/06/1998','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(8,'EMMANUEL','14/06/1993','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(9,'AARON','19/10/1995','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(10,'CESAR','14/02/1997','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

-- VISUALIZANDO LOS DATOS DESDE LA CONSOLA

SELECT * FROM ALUMNO;

INSERT INTO ALUMNO VALUES
(11,'CESAR',TO_DATE('1994-02-19', 'YYYY-MM-DD'),'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

-- BORRAR UN REGISTRO ESPECIFICANDO EL ID DE ESE REGISTRO
-- BORRAR DE 'NOMBRE DE LA TABLA' DONDE 'INDICAMOS UN CAMPO'
DELETE FROM ALUMNO WHERE ID_ALUMNO=11;

SELECT * FROM ALUMNO;

DESCRIBE CARRERAS;

--INSERCION DE DATOS EN LA TABLA CARRERAS
INSERT INTO CARRERAS VALUES
(1, 'ING EN SISTEMAS', 'EXACTAS',8,20,300);
INSERT INTO CARRERAS VALUES
(2, 'MEDICINA', 'CIENCIAS SALUD',10,20,300);
INSERT INTO CARRERAS VALUES
(3, 'DERECHO', 'HUMANIDADES',8,20,300);
INSERT INTO CARRERAS VALUES
(4, 'NUTRICION', 'CIENCIAS SALUD',8,20,300);
INSERT INTO CARRERAS VALUES
(5, 'LIC ADMINISTRACION', 'ECONOMICO AD',8,20,300);

SELECT * FROM CARRERAS;

-- Para que los registros se guarden en la base de datos

COMMIT;

-- Para guardar el Script o el codigo que vamos escribiendo
-- CTRL + S

DESCRIBE CARRERAS_ALUMNOS;
--Inserción de datos en la tabla relacional CARRERAS_ALUMNOS

INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,1,3);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,5,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,3,5);

SELECT * FROM CARRERAS_ALUMNOS;

-- AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
-- PODEMOS ESPECIFICAR QUE VAMOS AGREGAR UNA COLUMNA CON ADD COLUMN
-- O SI NO ESPECIFICAMOS AUTOMATICAMENTE AGREGA UNA COLUMNA, INDICANDO EL NOMBRE
ALTER TABLE CARRERAS ADD PRESUPUESTO_ANUAL NUMBER (5,2); --indicamos la longitud de digitos,
--en los cuales erían 5 digitos, de los cuales 2 son decimales.
-- tendríamos así valores desde -999.99 a 999.99

DESCRIBE CARRERAS;

-- MODIFICAR TIPO DE DATO DE LA COLUMNA (SIEMPRE Y CUANDO NO TENGA
-- DATOS INSERTADOS)

ALTER TABLE CARRERAS MODIFY PRESUPUESTO_ANUAL NVARCHAR2(10);

-- RENOMBRAR UNA COLUMNA
ALTER TABLE CARRERAS RENAME COLUMN PRESUPUESTO_ANUAL TO PRESUPUESTO_MENSUAL;

-- EJERCICIO
-- CREAR UNA TABLA QUE SE LLAME TUTORES
-- ID DEL TUTOR, NOMBRE DEL TUTOR, CLAVE DEL TUTOR - PRIMARY KEY
-- PONERLE RESTRICCION A LA CLAVE DEL TUTOR (A,B,C,D)
-- INSERTAR 10 REGISTROS

-- CREAR UNA TABLA RELACIONAL ALUMNOS_TUTORES
-- ID DE LA TABLA - PRIMARY KEY
-- ID ALUMNO
-- ID TUTOR
-- INSERTAR 5 REGISTROS

CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
CLAVE NVARCHAR2(1),
CONSTRAINT CHECK_CLAVE CHECK 
(CLAVE IN ('A','B','C','D'))
);

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER,
CONSTRAINT FK_IDALUMNO
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO),
CONSTRAINT FK_IDTUTOR
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR)
);

INSERT INTO TUTORES VALUES (1,'FILOMENO','A');
INSERT INTO TUTORES VALUES (2,'PANFILO','B');
INSERT INTO TUTORES VALUES (3,'EUSTAQUIO','C');
INSERT INTO TUTORES VALUES (4,'EUSEBIO','D');
INSERT INTO TUTORES VALUES (5,'ARNULFO','A');
INSERT INTO TUTORES VALUES (6,'FITO','B');
INSERT INTO TUTORES VALUES (7,'CASIMIRO','C');
INSERT INTO TUTORES VALUES (8,'RAMIRO','D');
INSERT INTO TUTORES VALUES (9,'TEOFILO','A');
INSERT INTO TUTORES VALUES (10,'HERMELINDA','D');

INSERT INTO ALUMNOS_TUTORES VALUES (1,1,1);
INSERT INTO ALUMNOS_TUTORES VALUES (2,2,2);
INSERT INTO ALUMNOS_TUTORES VALUES (3,3,3);
INSERT INTO ALUMNOS_TUTORES VALUES (4,4,4);
INSERT INTO ALUMNOS_TUTORES VALUES (5,5,5);
INSERT INTO ALUMNOS_TUTORES VALUES (6,6,6);
INSERT INTO ALUMNOS_TUTORES VALUES (7,7,7);
INSERT INTO ALUMNOS_TUTORES VALUES (8,8,1);
INSERT INTO ALUMNOS_TUTORES VALUES (9,9,1);
INSERT INTO ALUMNOS_TUTORES VALUES (10,10,1);

SELECT * FROM TUTORES;
SELECT * FROM ALUMNOS_TUTORES;

-- ELIMINAR UNA TABLA CON TODO Y SUS DATOS
DROP TABLE ALUMNOS_TUTORES;

--CREANDO SECUENCIAS
-- Se emplea para generar valores de numeros enteros
-- Estos pueden ser consecutivos (incremento de 1)
-- o con un incremento de más valores
-- Se utiliza para generar las llaves primarias y asegurarnos
-- que los valores no se repitan

-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ALUMNO_SEQ -- CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 11 -- EL VALOR EN EL QUE INICIA LA SECUENCIA
INCREMENT BY 1 -- INCREMENTA EL VALOR DE LA SECUENCIA COMO SE LE INDIQUE
MAXVALUE 999 -- INDICAMOS EL VALOR MÁXIMO PARA LA SECUENCIA
MINVALUE 1 -- INDICAMOS EL VALOR MÍNIMO DE LA SECUENCIA
CYCLE; -- INDICAMOS SI LA SECUENCIA UAN VEZ LLEGADO A SU MAXIMO VALOR
-- INICIE DE NUEVO
-- SI NO INDICAMOS EN CLYCLE, POR DEFAULT LA SECUENCIA CONTINUARÍA

-- CREAR UNA SECUENCIA CON LOS VALORES POR DEFECTO

CREATE SEQUENCE ALUMNOS_TUTORES_SEQ;

-- TRIGGER (DISPARADOR) - EJECTUTAR UN ACCIÓN O DESENCADENAR UN EVENTO


CREATE TRIGGER INSERT_ALUMNOS -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL; --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES 
(1,'ALEJANDRO','14/02/1997','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

SELECT * FROM ALUMNO;

-- CREAR EL TRIGGER PARA ALUMNOS_TUTORES

CREATE TRIGGER INSERT_ALUMNOS_TUTORES -- CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNOS_TUTORES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNOS_TUTORES_SEQ.NEXTVAL INTO:NEW.ID_AT FROM DUAL; --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

-- OTRA FORMA DE INSERCIÓN - INSERCICIÓN MASIVA

INSERT ALL
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (2,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (3,1)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (4,3)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (5,3)
SELECT * FROM DUAL;

SELECT * FROM ALUMNOS_TUTORES;

-------------------------------------------------------------
-- EJERCICIO 1

COMMIT;

-------------------------------------------
-- EJERCICIO 3

CREATE TABLE SOCIO(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE SOCIO_SEQ;

CREATE TRIGGER INSERT_SOCIO
BEFORE INSERT ON SOCIO FOR EACH ROW BEGIN
SELECT SOCIO_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;


CREATE TABLE BARCO(
ID_BARCO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
NUM_AMARRE NUMBER,
CUOTA NUMBER (6,2)
);

CREATE SEQUENCE BARCO_SEQ;

CREATE TRIGGER INSERT_BARCO
BEFORE INSERT ON BARCO FOR EACH ROW BEGIN
SELECT BARCO_SEQ.NEXTVAL INTO:NEW.ID_BARCO FROM DUAL;
END;

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
DIRECCION NVARCHAR2 (30),
TELEFONO NVARCHAR2(10)
);

CREATE SEQUENCE PATRON_SEQ;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TABLE SOCIOS_BARCO(
ID_SB NUMBER PRIMARY KEY,
ID_SOCIO NUMBER,
ID_BARCO NUMBER,
CONSTRAINT FK_ID_SOCIO
FOREIGN KEY (ID_SOCIO)
REFERENCES SOCIO (ID_SOCIO),
CONSTRAINT FK_ID_BARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO (ID_BARCO)
);

CREATE SEQUENCE SOCIOSBARCO_SEQ;

CREATE TRIGGER INSERT_SOCIOSBARCO
BEFORE INSERT ON SOCIOS_BARCO FOR EACH ROW BEGIN
SELECT SOCIOSBARCO_SEQ.NEXTVAL INTO:NEW.ID_SB FROM DUAL;
END;


CREATE TABLE SALIDAS_BARCO(
ID_SALIDA NUMBER PRIMARY KEY,
DESTINO NVARCHAR2(30),
FECHASALIDA DATE,
ID_BARCO NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_IDBARCO
FOREIGN KEY (ID_BARCO)
REFERENCES BARCO (ID_BARCO),
CONSTRAINT FK_IDPATRON
FOREIGN KEY (ID_PATRON)
REFERENCES PATRON (ID_PATRON)
);

CREATE SEQUENCE SALIDASBARCO_SEQ;

CREATE TRIGGER INSERT_SALIDASBARCO
BEFORE INSERT ON SALIDAS_BARCO FOR EACH ROW BEGIN
SELECT SALIDASBARCO_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;

DESCRIBE SOCIO;

INSERT ALL
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AYLIN','XALAPA','2282330908')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEX','XALAPA','2281072635')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEJANDRO','CDMX','3023079497')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EMMANUEL','CDMX','5630345103')
INTO SOCIO (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;

SELECT * FROM SOCIO;

INSERT ALL
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ABDIEL','XALAPA','2282535827')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('MARCOS','XALAPA','2283054341')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('TAVO','ACAPULCO','7441198412')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AARON','XALAPA','2283443722')
INTO PATRON (NOMBRE, DIRECCION, TELEFONO)  VALUES ('CESAR','ACAPULCO','7443838589')
SELECT * FROM DUAL;

SELECT * FROM PATRON;

DESCRIBE BARCO;
INSERT ALL
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA NIÑA', 11, 800.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('LA PINTA', 12, 900.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('ST. MARIE', 13, 1000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('MINI TITANIC', 14, 2000.50)
INTO BARCO (NOMBRE, NUM_AMARRE, CUOTA) VALUES ('POSEIDON', 15, 5000.50)
SELECT * FROM DUAL;

SELECT * FROM BARCO;

DESCRIBE SOCIOS_BARCO;

INSERT ALL
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (1,1)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (2,2)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (3,3)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (4,4)
INTO SOCIOS_BARCO (ID_SOCIO,ID_BARCO) VALUES (5,5)
SELECT * FROM DUAL;

SELECT * FROM SOCIOS_BARCO;

DESCRIBE SALIDAS_BARCO;

INSERT ALL
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('VERACRUZ',TO_DATE('20/01/2023 01:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('VILLAHERMOSA',TO_DATE('21/01/2023 13:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('CAMPECHE',TO_DATE('22/01/2023 14:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('YUCATAN',TO_DATE('23/01/2023 15:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('CANCUN',TO_DATE('24/01/2023 16:30:00','DD-MM-YYYY HH24:MI:SS'),1,1)
SELECT * FROM DUAL;

INSERT INTO SALIDAS_BARCO (DESTINO,FECHASALIDA,ID_BARCO,ID_PATRON) 
VALUES ('COZUMEL',TO_DATE('25/01/2023 12:00:00','DD-MM-YYYY HH24:MI:SS'),1,1);

SELECT * FROM SALIDAS_BARCO;

-- CONSULTAR HORARIO Y FECHA
SELECT ID_SALIDA,DESTINO, TO_CHAR(FECHASALIDA, 'DD-MM-YYYY HH24:MI:SS') FROM SALIDAS_BARCO;

-- CONSULTAR UNICAMENTE HORARIO DE SALIDA
SELECT ID_SALIDA,DESTINO, TO_CHAR(FECHASALIDA, 'HH24:MI:SS') FROM SALIDAS_BARCO;

COMMIT;
----------------------------------------------------------------------------------
-- EJERCICIO AEROLINEA

-- ENTIDADES FUERTES

CREATE TABLE BASES(
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2(20)
);

CREATE SEQUENCE BASES_SEQ;

CREATE TRIGGER INSERT_BASES
BEFORE INSERT ON BASES FOR EACH ROW BEGIN
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;

INSERT INTO BASES (TIPO) VALUES ('MANTENIMIENTO');
INSERT INTO BASES (TIPO) VALUES ('DESCANSO');

SELECT * FROM BASES;

CREATE TABLE VUELO(
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2(30),
DESTINO NVARCHAR2(30),
HORARIOVIAJE DATE
);

CREATE SEQUENCE VUELO_SEQ;

CREATE TRIGGER INSERT_VUELO
BEFORE INSERT ON VUELO FOR EACH ROW BEGIN
SELECT VUELO_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;

INSERT ALL
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('MEXICO','JAPON',TO_DATE ('20/01/2023 01:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('CDMX','MEDELLIN',TO_DATE ('21/01/2023 02:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('CDMX','COSTA RICA',TO_DATE ('22/01/2023 04:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('MONTERREY','TIJUANA',TO_DATE ('23/01/2023 05:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN,DESTINO,HORARIOVIAJE) VALUES
('PUEBLA','CANCUN',TO_DATE ('24/01/2023 06:30:00', 'DD-MM-YYYY HH24:MI:SS'))
SELECT * FROM DUAL;

SELECT * FROM VUELO;


CREATE TABLE LISTAS_CLIENTES(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
TELEFONO NVARCHAR2(10),
DIRECCION NVARCHAR2(30)
);

CREATE SEQUENCE LISTAS_CLIENTES_SEQ;

CREATE TRIGGER INSERT_LISTAS_CLIENTES
BEFORE INSERT ON LISTAS_CLIENTES FOR EACH ROW BEGIN
SELECT LISTAS_CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

INSERT ALL
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AYLIN','XALAPA','2282330908')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEX','XALAPA','2281072635')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEJANDRO','CDMX','3023079497')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EMMANUEL','CDMX','5630345103')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;

INSERT INTO LISTAS_CLIENTES (DIRECCION,NOMBRE,TELEFONO)  VALUES ('PUEBLA','ALEJANDRO','2282330908');
DESCRIBE LISTAS_CLIENTES;
SELECT * FROM LISTAS_CLIENTES;

-- ENTIDADES DEBILES

CREATE TABLE AVIONES(
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2(20),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE AVIONES_SEQ;

CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

-- REGISTRO DE AVIONES

INSERT ALL
INTO AVIONES (MODELO,ID_BASE) VALUES ('BOEING',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('AIRBUS 300',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('JET',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('VOLVO',1)
INTO AVIONES (MODELO,ID_BASE) VALUES ('Embraer E-Jet ',1)
SELECT * FROM DUAL;

SELECT * FROM AVIONES;

COMMIT;

CREATE TABLE PILOTOS(
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
HORASVIAJE NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE PILOTOS_SEQ;

CREATE TRIGGER INSERT_PILOTOS
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;

-- REGISTRO PILOTOS

INSERT ALL
INTO PILOTOS (NOMBRE,HORASVIAJE,ID_BASE) VALUES ('HUGO',300,2)
INTO PILOTOS (NOMBRE,HORASVIAJE,ID_BASE) VALUES ('PACO',600,2)
INTO PILOTOS (NOMBRE,HORASVIAJE,ID_BASE) VALUES ('LUIS',400,2)
INTO PILOTOS (NOMBRE,HORASVIAJE,ID_BASE) VALUES ('PEDRO',850,2)
INTO PILOTOS (NOMBRE,HORASVIAJE,ID_BASE) VALUES ('JAYRO',330,2)
SELECT * FROM DUAL;

SELECT * FROM PILOTOS;

CREATE TABLE VUELO_AVION_PILOTO(
ID_VAP NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_AVION NUMBER,
ID_PILOTO NUMBER,
CONSTRAINT FK_IDVUELO_VAP
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDAVION_VAP
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES (ID_AVION),
CONSTRAINT FK_IDPILOTO_VAP
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS (ID_PILOTO)
);

CREATE SEQUENCE VAP_SEQ;

CREATE TRIGGER INSERT_VAP
BEFORE INSERT ON VUELO_AVION_PILOTO FOR EACH ROW BEGIN
SELECT VAP_SEQ.NEXTVAL INTO:NEW.ID_VAP FROM DUAL;
END;

-- REGISTROS DE VUELO AVION PILOTO

INSERT ALL
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (1,3,2)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (2,4,1)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (3,1,4)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (4,2,5)
INTO VUELO_AVION_PILOTO (ID_VUELO,ID_AVION,ID_PILOTO) VALUES (5,5,3)
SELECT * FROM DUAL;

SELECT * FROM VUELO_AVION_PILOTO;

CREATE TABLE TRIPULACION(
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;

-- REGISTRO TRIPULACION


INSERT ALL
INTO TRIPULACION (NOMBRE,ID_BASE) VALUES ('ABDIEL',2)
INTO TRIPULACION (NOMBRE,ID_BASE) VALUES ('MARCOS',2)
INTO TRIPULACION (NOMBRE,ID_BASE) VALUES ('TAVO',2)
INTO TRIPULACION (NOMBRE,ID_BASE) VALUES ('AARON',2)
INTO TRIPULACION (NOMBRE,ID_BASE) VALUES ('CESAR',2)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;

COMMIT;

CREATE TABLE VUELO_TRIPULACION(
ID_VT NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_TRIPULACION NUMBER,
CONSTRAINT FK_IDVUELO_VT
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDTRIPULACION_VT
FOREIGN KEY (ID_TRIPULACION)
REFERENCES TRIPULACION (ID_TRIPULACION)
);

CREATE SEQUENCE VT_SEQ;

CREATE TRIGGER INSERT_VT
BEFORE INSERT ON VUELO_TRIPULACION FOR EACH ROW BEGIN
SELECT VT_SEQ.NEXTVAL INTO:NEW.ID_VT FROM DUAL;
END;

-- REGISTRO DE VUELO TRIPULACION

INSERT ALL
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (1,2)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (2,3)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (3,4)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (4,5)
INTO VUELO_TRIPULACION (ID_VUELO,ID_TRIPULACION) VALUES (5,1)
SELECT * FROM DUAL;

SELECT * FROM VUELO_TRIPULACION;

CREATE TABLE BOLETOS(
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER (6,2),
CONSTRAINT FK_IDVUELO_BOLETOS
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
FOREIGN KEY (ID_CLIENTE)
REFERENCES LISTAS_CLIENTES (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;

CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;

INSERT ALL
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (1,3,9999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (2,4,8999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (3,5,7599.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (4,1,4999.50)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (5,2,5500)
SELECT * FROM DUAL;

SELECT * FROM BOLETOS;

COMMIT;

INSERT INTO TRIPULACION (NOMBRE,ID_BASE) VALUES ('EUGENIO',2);

SELECT * FROM TRIPULACION;

-- REVERTIR LA INSERCIÓN DE DATOS ANTES DE GUARDARLOS
-- NOS LLEVA AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;

-- ELIMINAR REGISTROS DE UNA TABLA (UN REGISTRO ESPECIFICO)
-- DEBEMOS ELEGIR UNA COLUMNA O UN DATO COINCIDENTE PARA ELIMINAR DICHA FILA

DELETE FROM TRIPULACION WHERE NOMBRE='EUGENIO';
SELECT * FROM TRIPULACION;

-- MOSTRAR COLUMNAS ESPECIFICAS DE UNA TABLA
SELECT NOMBRE FROM PILOTOS;

-- LA CONSULTA DE TODOS LOS DATOS SE INDICA CON *
SELECT * FROM PILOTOS;

-- RELACIONANDO DATOS CON UNA CONDICION
SELECT HORASVIAJE, NOMBRE FROM PILOTOS WHERE HORASVIAJE>400;

-- RELACIONANDO DATOS CONCATENANDOLOS CON 'AND'
SELECT HORASVIAJE, NOMBRE, ID_BASE FROM PILOTOS WHERE HORASVIAJE>300 AND ID_BASE=2;

-- UTILIZAMOS BETWEEN PARA BUSCAR RANGOS DE UN VALOR
SELECT * FROM PILOTOS WHERE HORASVIAJE BETWEEN 400 AND 900;

-- BUSCAR VALORES SIMILARES
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%';
SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';

-- FUNCIONES DE AGREGACIÓN
SELECT MAX(HORASVIAJE) FROM PILOTOS;
SELECT MIN(HORASVIAJE) FROM PILOTOS;
--BUSCAR AL PILOTO CON MÁS HORAS DE VIAJE
SELECT * FROM PILOTOS WHERE HORASVIAJE = (SELECT MAX(HORASVIAJE) FROM PILOTOS);

COMMIT;

-- ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVIAJE=NULL; -- Actualizamos los valores a nulos
SELECT * FROM PILOTOS; --Verificamos que se hayan actualizado los valores
ROLLBACK; -- Podemos regresar al estado del ultimo commit con rollback

-- REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVIAJE<400;

-- OBTENER EL PROMEDIO DE LOS VALORES DE UNA COLUMNA (HORASVIAJE)
SELECT AVG (HORASVIAJE) FROM PILOTOS;

-- SUMATORIA DE VALORES
SELECT SUM (HORASVIAJE) FROM PILOTOS;

-- FUNCIONES GROUP BY
-- MOSTRAR CUANTOS ALUMNOS HAY POR CADA GENERO
SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP BY SEXO;

SELECT * FROM ALUMNO;

-- ORDENARLOS CON EL COMANDO DESC PARA PONER EN ORDEN DESCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

-- ORDENARLOS CON EL COMANDO ASC PARA PONER EN ORDEN ASCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

COMMIT;

-- BUSCAR LOS DATOS DE LA TRIUPLACION EN EL VUELO DONDE EL CLIENTE HAYA SIDO ='NOMBRE';

SELECT * FROM TRIPULACION WHERE ID_TRIPULACION IN -- Buscar los datos de la tripulacion
(SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO IN -- Identificar al tripulante que estuvo en el vuelo
(SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE IN -- Identificar el vuelo del cliente
(SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE='EMMANUEL'))); -- Identificamos al cliente


-- Consultas con JOINS

-- INNER JOIN
-- Se muestran los registros que coinciden de una tabla 'A' y unta tabla 'B'
-- La coincidencia o el campo que los une (llave) lo muestra justo en el medio
-- Para que los Joins puedan realizarse se facilita mediante las primary keys
-- y las foreign keys

-- Forma explicita
-- Se indica en INNER JOIN o JOIN

DESCRIBE PILOTOS;
DESCRIBE BASES;

SELECT * FROM PILOTOS -- Seleccionamos todo de una tabla A
INNER JOIN BASES -- Indicamos la union con el JOIN y la tabla B
ON PILOTOS.ID_BASE=BASES.ID_BASE; -- Indicamos donde se van a unir

SELECT * FROM PILOTOS -- Seleccionamos todo de una tabla A
JOIN BASES -- Indicamos la union con el JOIN y la tabla B
ON PILOTOS.ID_BASE=BASES.ID_BASE; -- Indicamos donde se van a unir

--LEFT JOIN
--RIGHT JOIN

SELECT * FROM BASES
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

SELECT * FROM LISTAS_CLIENTES
RIGHT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE=BOLETOS.ID_CLIENTE;

--FULL JOIN
SELECT * FROM BASES
FULL JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

-- Identificar las tablas con alias
SELECT * FROM LISTAS_CLIENTES C -- Identificandola con un alias C
INNER JOIN BOLETOS B -- Identificando con un alias B
ON C.ID_CLIENTE=B.ID_CLIENTE;


-- Buscar Id del avion, modelo y destino del vuelo, del piloto con más horas de vuelo

SELECT AVIONES.ID_AVION, AVIONES.MODELO,VUELO.DESTINO FROM PILOTOS
INNER JOIN VUELO_AVION_PILOTO
ON PILOTOS.ID_PILOTO=VUELO_AVION_PILOTO.ID_PILOTO
INNER JOIN VUELO
ON VUELO.ID_VUELO=VUELO_AVION_PILOTO.ID_VUELO
INNER JOIN AVIONES
ON AVIONES.ID_AVION=VUELO_AVION_PILOTO.ID_AVION
WHERE HORASVIAJE = (SELECT MAX(HORASVIAJE) FROM PILOTOS);



