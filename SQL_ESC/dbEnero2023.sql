-- Con dos guiones podemos poner un comentario

/*Podemos poner comentarios de multiples lineas
SQL- Lenguaje de consulta estructurado (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en
bases de datos relacionales
*/

-- Base de datos - conjunto de datos organizados entre sí, almacenados
--en tablas

/*La estructura de las tablas sería de la siguiente manera
-Llave Primaria -- Id - Toda tabla debe llevar su llave primaria
-LLave foranea -- Pueden llevar llave forane, la cual es
una llave primaria que proviene de otra tabla
-Tipo de Datos (caracteres o numericos, tipo fecha)

NUMBER - Datos numéricos
NVARCHAR2 - Permite entrada de datos de caracteres alfabeticos
y también caracteres especiales
DATE - Utilizado para manejo de fecha y hora

-- ALUMNO
-- MATRICULA O ID
-- NOMBRE
-- FECHA DE NACIMIENTO
-- SEXO
-- GRADO
-- STATUS DE ACTIVO O INACTIVO
-- CURP
*/

-- Creando la tabla de Alumno
--La sintaxis puede ir en mayusculas o minusculas

CREATE TABLE ALUMNO( -- Indicamos el nombre de la tabla
ID_ALUMNO NUMBER PRIMARY KEY, -- Comenzamos con su llave primaria
NOMBRE NVARCHAR2 (30), -- Indicamos otro dato y el tipo de dato
FECHANAC DATE,
SEXO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 (20),
STATUS NUMBER
);

-- Si quiero ver la estructura de una tabla
-- Se utiliza DESCRIBE y el nombre de la tabla

DESCRIBE ALUMNO;

-- Crear una tabla con la carrera de los Alumnos

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
NUM_SEMESTRES NUMBER,
NUM_MATERIAS NUMBER,
CREDITOS NUMBER
);

DESCRIBE CARRERAS;

CREATE TABLE CARRERAS_ALUMNOS (
ID_CA NUMBER PRIMARY KEY,
ID_CARRERA NUMBER,
ID_ALUMNO NUMBER
);

-- Entidades Fuertes
-- Son aquellas que tienen sus datos completos y no dependen
-- de otra entidad o tabla para existir

-- Entidades debiles
-- Son aquellas que reciben una llave foranea y esto las hace dependientes
-- de otras tablas para existir

-- AGREGANDO RESTRICCIONES A UNA TABLA
-- Las restricciones deben llevar un nombre y se identifican por el
--comando 'CONSTRAINT'

-- En la tabla ALUMNO, vamos a agregar una restricción en el sexo
-- para que solo podamos introducir 'MASCULINO' o 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_SEXO CHECK
(SEXO IN ('MASCULINO','FEMENINO'));

ALTER TABLE ALUMNO DROP CONSTRAINT CHECK_SEXO;

DESCRIBE ALUMNO;

-- CREANDO UNA RESTRICCION EN LA TABLA CARRERAS
-- Para no repetir nombres
-- UNIQUE, para agregar una restricció única en un registro

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

-- AGREGANDO UNA LLAVE FORANEA
-- Una llave foranea también es una restriccion, porque
-- vamos a especificar de donde proviene dicha llave

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES ALUMNO (ID_ALUMNO); -- QUIEN DA (DE QUE TABLA Y QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_ID_CARRERA
FOREIGN KEY (ID_CARRERA) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES CARRERAS (ID_CARRERA); -- QUIEN DA (DE QUE TABLA Y QUE COLUMNA)

-- INSERCIÓN DE DATOS INDIVIDUALES

DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES
(1,'AYLIN','19/04/1995','FEMENINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(2,'ALEX','08/05/1998','MASCULINO','AAAL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(3,'ALEJANDRO G','25/04/1997','MASCULINO','AAUL0899623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(4,'ABDIEL','30/12/1997','MASCULINO','ASSL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(5,'MARCOS','19/05/1996','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(6,'EDUARDO','01/11/1995','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(7,'TAVO','13/06/1998','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(8,'EMMANUEL','14/06/1993','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(9,'AARON','19/10/1995','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES
(10,'CESAR','14/02/1997','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

-- VISUALIZANDO LOS DATOS DESDE LA CONSOLA

SELECT * FROM ALUMNO;

INSERT INTO ALUMNO VALUES
(11,'CESAR',TO_DATE('1994-02-19', 'YYYY-MM-DD'),'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

-- BORRAR UN REGISTRO ESPECIFICANDO EL ID DE ESE REGISTRO
-- BORRAR DE 'NOMBRE DE LA TABLA' DONDE 'INDICAMOS UN CAMPO'
DELETE FROM ALUMNO WHERE ID_ALUMNO=11;

SELECT * FROM ALUMNO;

DESCRIBE CARRERAS;

--INSERCION DE DATOS EN LA TABLA CARRERAS
INSERT INTO CARRERAS VALUES
(1, 'ING EN SISTEMAS', 'EXACTAS',8,20,300);
INSERT INTO CARRERAS VALUES
(2, 'MEDICINA', 'CIENCIAS SALUD',10,20,300);
INSERT INTO CARRERAS VALUES
(3, 'DERECHO', 'HUMANIDADES',8,20,300);
INSERT INTO CARRERAS VALUES
(4, 'NUTRICION', 'CIENCIAS SALUD',8,20,300);
INSERT INTO CARRERAS VALUES
(5, 'LIC ADMINISTRACION', 'ECONOMICO AD',8,20,300);

SELECT * FROM CARRERAS;

-- Para que los registros se guarden en la base de datos

COMMIT;

-- Para guardar el Script o el codigo que vamos escribiendo
-- CTRL + S

DESCRIBE CARRERAS_ALUMNOS;
--Insercion de datos en la tabla relacional CARRERAS_ALUMNOS

INSERT INTO CARRERAS_ALUMNOS VALUES(1,1,1);
INSERT INTO CARRERAS_ALUMNOS VALUES(2,2,2);
INSERT INTO CARRERAS_ALUMNOS VALUES(3,1,3);
INSERT INTO CARRERAS_ALUMNOS VALUES(4,5,4);
INSERT INTO CARRERAS_ALUMNOS VALUES(5,3,5);

SELECT * FROM CARRERAS_ALUMNOS;

-- AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
-- PODEMOS ESPECIFICAR QUE VAMOS A AGREGAR COLUMNA CON ADD COLUMN
-- O SI NO ESPECIFICAMOS AUTOMATICAMENTE AGREGA UNA COLUMNA INDICANDO EL NOMBRE
ALTER TABLE CARRERAS ADD PRESUPUESTO_ANUAL NUMBER (5,2);--Indicamos la longitus de digitos
                                                       -- en los cuales serian 5 digitos, de los cuales 2 son decimales.
                                                       -- tendriamos asi valores -999.99 a 999.99

DESCRIBE CARRERAS;

--MODIFICAR TIPO DE DATO DE LA COLUMNA (SIEMPRE Y CUANDO NO TENGA DATOS INSERTADOS)

ALTER TABLE CARRERAS MODIFY PRESUPUESTO_ANUAL NVARCHAR2(10);


-- RENOMBRAR UNA COLUMNA
ALTER TABLE CARRERAS RENAME COLUMN PRESUPUESTO_ANUAL TO PRESUPUESTO_MENSUAL;

-- EJERCICIO
-- CREAR UNA TABLA QUE SE LLAME TUTORES
-- ID DEL TUTOR, NOMBRE DEL TUTOR, CLAVE DEL TUTOR
--PONERLES RESTRICCION A LA CLAVE TUTOR (A,B,C,D)
-- INSERTAR 10 REGISTROS

--CREAR UNA TABLA RELACIONAL ALUMNOS_TUTORES
--ID DE LA TABLA
-- ID ALUMNO
-- ID TUTOR
-- INSERTAR 5 REGISTROS

--CREANDO TABLA TUTORES
CREATE TABLE TUTORES(
ID_TUTOR NUMBER PRIMARY KEY,
NOMBRE_TUTOR NVARCHAR2(30),
CLAVE_TUTOR NVARCHAR2(10) 
);

-- CREANDO RESTRICCION
ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE_TUTOR CHECK ( CLAVE_TUTOR IN ('A','B','C','D'));

--CREAR TABLA RELACIONAL ALUMNOS_TUTORES
CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER
);

-- CREANDO LLAVES FORANEAS
ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FKEY_ID_ALUMNO
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO);

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FKEY_ID_TUTOR
FOREIGN KEY (ID_TUTOR) 
REFERENCES TUTORES (ID_TUTOR);

-- INSERTAR DATOS A TABLA TUTORES
INSERT INTO TUTORES VALUES (1,'JORGE','A');
INSERT INTO TUTORES VALUES (2,'GUSTAVO','B');
INSERT INTO TUTORES VALUES (3,'ROBERTO','A');
INSERT INTO TUTORES VALUES (4,'ENRIQUE','B');
INSERT INTO TUTORES VALUES (5,'MARIO','C');
INSERT INTO TUTORES VALUES (6,'CONSUELO','D');
INSERT INTO TUTORES VALUES (7,'VIANNEY','A');
INSERT INTO TUTORES VALUES (8,'JUAN','B');
INSERT INTO TUTORES VALUES (9,'ANTONIO','C');
INSERT INTO TUTORES VALUES (10,'DOLORES','D');

-- INSERTAR REGISTROS EN TABLA ALUMNOS_TUTORES
INSERT INTO ALUMNOS_TUTORES VALUES(1,1,6);
INSERT INTO ALUMNOS_TUTORES VALUES(2,2,7);
INSERT INTO ALUMNOS_TUTORES VALUES(3,3,8);
INSERT INTO ALUMNOS_TUTORES VALUES(4,4,9);
INSERT INTO ALUMNOS_TUTORES VALUES(5,5,10);

commit;

--ELIMINAR UNA TABLA CON TODO Y SUS DATOS
DROP TABLE ALUMNOS_TUTORES;

--CREANDO SECUENCIAS
-- Se emplea para generar valores de numeros enteros
-- Estos pueden ser consecutivos (incremento de 1)
-- o con un incremento de más valores
-- Se utiliza para generar las llaves primarias y asegurarnos
-- que los valores no se repitan


-- CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES
CREATE SEQUENCE ALUMNO_SEQ --CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 11 --El valor en el que inicia la secuencia
INCREMENT BY 1 --INCREMENTA EL VALOR DE LA SECUENCIA COMO SE LE INDIQUE
MAXVALUE 999 --INDICAMOS EL VALOR MAXIMO PARA LA SECUENCIA
MINVALUE 1 -- INDICAMOS EL VALOR MINIMO DE LA SECUENCIA
CYCLE; --INDICAMOS SI LA SECUENCUA UNA VEZ LLEAGANDO A SU MAXIMO VALOR

--INICIE DE NUEVO
-- SI NO INDICAMOS CYCLE, POR DEFAULT LA SECUENCIA CONTINUARIA

-- CREAR UNA SECUENCIA CON LOS VALORES POR DEFECTO

CREATE SEQUENCE ALUMNOS_TUTORES_SEQ;

--TRIGGER (DISPARADOR) - EJECUTAR UNA ACCION O SESENCADENAR UN EVENTO

CREATE TRIGGER INSERT_ALUMNOS --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL;--Seleciona el valor de la secuencia y lo inserta
END;

INSERT INTO ALUMNO VALUES
(1,'ANASTACIO','01/01/1990','MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

SELECT * FROM ALUMNO;
COMMIT;

--CREAR TRIGGER PARA ALUMNOS_TUTORES
CREATE TRIGGER INSERT_ALUMNOS_TUTORES --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNOS_TUTORES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNOS_TUTORES_SEQ.NEXTVAL INTO:NEW.ID_AT FROM DUAL;--Seleciona el valor de la secuencia y lo inserta
END;

DROP TRIGGER INSERT_ALUMNOS_TUTORES;

INSERT INTO ALUMNOS_TUTORES VALUES (6,5,2);

INSERT ALL
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
SELECT * FROM DUAL;

select * from alumnos_tutores;
COMMIT;
-------------------------------------------------------------------
--EJERCICIO 1
-- Diseñar una base de datos relacional para almacenar información sobre los 
-- asuntos que lleva un gabinete de abogados. Cada asunto tiene un número de 
-- expediente que lo identifica, y corresponde a un solo cliente. Del asunto 
-- se debe almacenar el período (fecha de inicio y fecha de archivo o finalización), 
-- su estado (en trámite, archivado, etc.), Así como los datos personales del 
-- cliente al que  pertenece (DNI, nombre, dirección, etc.). 
-- Algunos asuntos son llevados por uno o varios procuradores, de los que nos 
-- interesan también los datos personales.

--CREAR TABLA PROCURADORE

CREATE TABLE PROCURADORES(
ID_PROCURADOR NUMBER PRIMARY KEY,
NOMBRE VARCHAR2 (10),
APELLIDOS NVARCHAR2 (20),
DIRECCION NVARCHAR2 (40),
DNI_PROCURADOR NVARCHAR2 (20)
);

-- CREAR TABLA PERIODO

CREATE TABLE PERIODO(
ID_PERIODO NUMBER PRIMARY KEY,
FECHA_INICIO DATE,
FECHA_FINALIZACION DATE
);

--CREAR TABLA CLIENTES

CREATE TABLE CLIENTES(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (10),
APELLIDOS NVARCHAR2 (20),
DIRECCION NVARCHAR2 (40)
);

--CREAR TABLA ASUNTOS
CREATE TABLE ASUNTOS(
ID_ASUNTO NUMBER PRIMARY KEY,
NUM_EXPEDIENTE NVARCHAR2 (20),
ESTADO NVARCHAR2 (10),
ID_CLIENTE NUMBER,
ID_PERIODO NUMBER,
ID_PROCURADOR NUMBER
);


ALTER TABLE CLIENTES ADD CONSTRAINT FK_ID_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID_CLIENTE);
ALTER TABLE PERIODO ADD CONSTRAINT FK_ID_PERIODO FOREIGN KEY (ID_PERIODO) REFERENCES PERIODO (ID_PERIODO);
ALTER TABLE PROCURADORES ADD CONSTRAINT FK_ID_PROCURADOR FOREIGN KEY (ID_PROCURADOR) REFERENCES PROCURADORES(ID_PROCURADOR);
ALTER TABLE ASUNTOS ADD CONSTRAINT CHECK_ESTADO CHECK (ESTADO IN ('EN TRAMITE','ARCHIVADO'));


--CREAR TABLA ASUNTOS_PROCURADOR
CREATE TABLE ASUNTOS_PROCURADOR(
ID_AP NUMBER PRIMARY KEY,
ID_ASUNTO NUMBER,
ID_PROCURADOR NUMBER,
CONSTRAINT FK_IDASUNTO FOREIGN KEY (ID_ASUNTO) REFERENCES ASUNTOS (ID_ASUNTO),
CONSTRAINT FK_IDPROCURADOR FOREIGN KEY (ID_PROCURADOR) REFERENCES PROCURADORES(ID_PROCURADOR)
);


--CREAR SECUENCIA PARA ID_CLIENTE
CREATE SEQUENCE CLIENTE_SEQ 
START WITH 1 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
CYCLE;

--CREAR SECUENCIA PARA ID_PROCURADORES
CREATE SEQUENCE PROCURADORES_SEQ 
START WITH 1 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
CYCLE;

--CREAR SECUENCIA PARA ID_PERIODO
CREATE SEQUENCE PERIODO_SEQ 
START WITH 1 
INCREMENT BY 1 
MAXVALUE 999 
MINVALUE 1 
CYCLE;

--CREAR SECUENCIA PARA ID_ASUNTO
CREATE SEQUENCE ASUNTO_SEQ;

--CREAR SECUENCIA PARA ASUNTOS_PROCURADOR
CREATE SEQUENCE ASUNTOS_PROCU_SEQ;


-- CREACION DE TRIGGERS
CREATE TRIGGER INSERT_CLIENTES --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT CLIENTE_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;--Seleciona el valor de la secuencia y lo inserta
END;

CREATE TRIGGER INSERT_PROCURADORES --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON PROCURADORES FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT PROCURADORES_SEQ.NEXTVAL INTO:NEW.ID_PROCURADOR FROM DUAL;--Seleciona el valor de la secuencia y lo inserta
END;

CREATE TRIGGER INSERT_PERIODO --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON PERIODO FOR EACH ROW BEGIN -- DONDE SE EJECUTA EL TRIGGER
SELECT PERIODO_SEQ.NEXTVAL INTO:NEW.ID_PERIODO FROM DUAL;--Seleciona el valor de la secuencia y lo inserta
END;

CREATE TRIGGER INSERT_ASUNTO
BEFORE INSERT ON ASUNTOS FOR EACH ROW BEGIN
SELECT ASUNTO_SEQ.NEXTVAL INTO:NEW.ID_ASUNTO FROM DUAL;
END;

CREATE TRIGGER INSERT_ASUNTOS_PROCU
BEFORE INSERT ON ASUNTOS_PROCURADOR FOR EACH ROW BEGIN
SELECT ASUNTOS_PROCU_SEQ.NEXTVAL INTO:NEW.ID_AP FROM DUAL;
END;

INSERT ALL
INTO CLIENTES (NOMBRE, APELLIDOS,DIRECCION, DNI_CLIENTE) VALUES ('EMMANUEL','SANDOVAL','DEL TALLER NO.12 SAN FRANCISCO MAZAPA','SACE23042943SE')
INTO CLIENTES (NOMBRE, APELLIDOS,DIRECCION, DNI_CLIENTE) VALUES ('ALEJANDRO','CARDENAS','DEL TALLER NO.15 SAN FRANCISCO MAZAPA','SACE23042943SE')
INTO CLIENTES (NOMBRE, APELLIDOS,DIRECCION, DNI_CLIENTE) VALUES ('LUIS','SC','DEL TALLER NO.18 SAN FRANCISCO MAZAPA','SACE23042943SE')
INTO CLIENTES (NOMBRE, APELLIDOS,DIRECCION, DNI_CLIENTE) VALUES ('ABIGAIL','AG','DEL TALLER NO.150 SAN FRANCISCO MAZAPA','SACE23042943SE')
INTO CLIENTES (NOMBRE, APELLIDOS,DIRECCION, DNI_CLIENTE) VALUES ('DANIEL','GAL','DURAZNO NO.17 SAN FRANCISCO MAZAPA','SACE23042943SE')
SELECT * FROM DUAL;

INSERT ALL
INTO PROCURADORES (NOMBRE, APELLIDOS,DIRECCION) VALUES ('JORGE','PEREZ','SANTA MARIA COATLAN')
INTO PROCURADORES (NOMBRE, APELLIDOS,DIRECCION) VALUES ('ESTELA','PORTILLO','SAN FRANCISCO MAZAPA')
INTO PROCURADORES (NOMBRE, APELLIDOS,DIRECCION) VALUES ('NANCY','AGUILAR','SAN FRANCISCO MAZAPA')
INTO PROCURADORES (NOMBRE, APELLIDOS,DIRECCION) VALUES ('FRANCISCO','CONTRETAS','TLAJINGA TEOTIHUACAN')
INTO PROCURADORES (NOMBRE, APELLIDOS,DIRECCION) VALUES ('YESENIA','RAMIREZ','SAN FRANCISCO MAZAPA')
SELECT * FROM DUAL;

INSERT ALL
INTO PERIODO (FECHA_INICIO, FECHA_FINALIZACION) VALUES ('01/02/22','20/12/22')
INTO PERIODO (FECHA_INICIO, FECHA_FINALIZACION) VALUES ('15/04/22','20/10/22')
INTO PERIODO (FECHA_INICIO, FECHA_FINALIZACION) VALUES ('30/05/22','20/11/22')
INTO PERIODO (FECHA_INICIO, FECHA_FINALIZACION) VALUES ('25/06/22','20/09/22')
INTO PERIODO (FECHA_INICIO, FECHA_FINALIZACION) VALUES ('08/11/22','')
SELECT * FROM DUAL;

INSERT ALL
INTO ASUNTOS (NUM_EXPEDIENTE, ESTADO, ID_CLIENTE, ID_PERIODO, ID_PROCURADOR) VALUES ('00001','ARCHIVADO',1,1,1)
INTO ASUNTOS (NUM_EXPEDIENTE, ESTADO, ID_CLIENTE, ID_PERIODO, ID_PROCURADOR) VALUES ('00002','ARCHIVADO',2,2,2)
INTO ASUNTOS (NUM_EXPEDIENTE, ESTADO, ID_CLIENTE, ID_PERIODO, ID_PROCURADOR) VALUES ('00003','ARCHIVADO',3,3,3)
INTO ASUNTOS (NUM_EXPEDIENTE, ESTADO, ID_CLIENTE, ID_PERIODO, ID_PROCURADOR) VALUES ('00004','ARCHIVADO',4,4,4)
INTO ASUNTOS (NUM_EXPEDIENTE, ESTADO, ID_CLIENTE, ID_PERIODO, ID_PROCURADOR) VALUES ('00005','EN TRAMITE',4,4,4)
SELECT * FROM DUAL;

INSERT ALL
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (2,1)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (3,2)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (4,3)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (1,3)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (5,5)
SELECT * FROM DUAL;

COMMIT;

------------------------------------------------------------------------------
-- Ejercicio 2
-- Se quiere diseñar una base de datos relacional para gestionar los datos de 
-- los socios de un club náutico. De cada socio se guardan los datos personales 
-- y los datos del barco o barcos que posee: número de matrícula, nombre, 
-- número del amarre y cuota que paga por el mismo. Además, se quiere mantener 
-- información sobre las salidas realizadas por cada barco, como la fecha y hora
-- de salida, el destino y los datos personales del patrón, que no tiene porque 
-- ser el propietario del barco, ni es necesario que sea socio del club.

--CREAR TABLA SOCIOS

CREATE TABLE SOCIOS(
ID_SOCIO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (10),
APELLIDOS NVARCHAR2 (20),
DIRECCION NVARCHAR2 (30),
TELEFONO NUMBER (10)
);

--CREAR TABLA BARCOS

CREATE TABLE BARCOS(
NO_MATRICULA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (15),
NO_AMARRE NUMBER,
CUOTA NUMBER,
ID_SOCIO NUMBER,
CONSTRAINT FK_ID_SOCIO FOREIGN KEY (ID_SOCIO) REFERENCES SOCIOS (ID_SOCIO)
);

--CREAR TABLA PATRON

CREATE TABLE PATRON(
ID_PATRON NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (10),
APELLIDOS NVARCHAR2 (20),
DIRECCION NVARCHAR2 (30),
TELEFONO NUMBER (10)
);

--CREAR TABLA SALIDAS

CREATE TABLE SALIDAS(
ID_SALIDA NUMBER PRIMARY KEY,
FECHA_HORA_SALIDA DATE,
DESTINO NVARCHAR2 (15),
NO_MATRICULA NUMBER,
ID_PATRON NUMBER,
CONSTRAINT FK_NO_MATRICULA FOREIGN KEY (NO_MATRICULA) REFERENCES BARCOS (NO_MATRICULA),
CONSTRAINT FK_ID_PATRON FOREIGN KEY (ID_PATRON) REFERENCES PATRON (ID_PATRON)
);

--CREAR SECUENCIA PARA SOCIOS
CREATE SEQUENCE SOCIOS_SEQ;

--CREAR SECUENCIA PARA PATRON
CREATE SEQUENCE PATRON_SEQ;

--CREAR SECUENCIA PARA SALIDAS
CREATE SEQUENCE SALIDAS_SEQ;

-- CREACION DE TRIGGERS PARA SECUENCIAS

CREATE TRIGGER INSERT_SOCIOS
BEFORE INSERT ON SOCIOS FOR EACH ROW BEGIN
SELECT SOCIOS_SEQ.NEXTVAL INTO:NEW.ID_SOCIO FROM DUAL;
END;

CREATE TRIGGER INSERT_PATRON
BEFORE INSERT ON PATRON FOR EACH ROW BEGIN
SELECT PATRON_SEQ.NEXTVAL INTO:NEW.ID_PATRON FROM DUAL;
END;

CREATE TRIGGER INSERT_SALIDAS
BEFORE INSERT ON SALIDAS FOR EACH ROW BEGIN
SELECT SALIDAS_SEQ.NEXTVAL INTO:NEW.ID_SALIDA FROM DUAL;
END;

-- INSERTAR 5 REGISTROS EN TABLAS
INSERT ALL
INTO SOCIOS(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('EMMANUEL','SANDOVAL','SAN FRANCISCO MAZAPA', 5630345103)
INTO SOCIOS(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('ALEJANDRO','CARDENAS','TECAMAC', 5517967512)
INTO SOCIOS(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('LUIS','SC','SAN FRANCISCO MAZAPA', 5516502413)
INTO SOCIOS(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('NANCY','AGUILAR','SANTA MARIA COATLAN', 5540114402)
INTO SOCIOS(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('JESE','SA','SAN FRANCISCO MAZAPA', 5530345107)
SELECT * FROM DUAL;

INSERT ALL
INTO BARCOS(NO_MATRICULA, NOMBRE, NO_AMARRE, CUOTA, ID_SOCIO) VALUES (1,'BARCO 1',1, 1500, 1)
INTO BARCOS(NO_MATRICULA, NOMBRE, NO_AMARRE, CUOTA, ID_SOCIO) VALUES (2,'BARCO 2',2, 1000, 2)
INTO BARCOS(NO_MATRICULA, NOMBRE, NO_AMARRE, CUOTA, ID_SOCIO) VALUES (3,'BARCO 3',2, 1300, 3)
INTO BARCOS(NO_MATRICULA, NOMBRE, NO_AMARRE, CUOTA, ID_SOCIO) VALUES (4,'BARCO 4',1, 1500, 4)
INTO BARCOS(NO_MATRICULA, NOMBRE, NO_AMARRE, CUOTA, ID_SOCIO) VALUES (5,'BARCO 5',1, 2000, 5)
SELECT * FROM DUAL;

INSERT ALL
INTO PATRON(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('ALEJANDRO','SG','CDMX', 5555555555)
INTO PATRON(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('ARMANDO','AR','GDL', 6666666666)
INTO PATRON(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('DANIEL','PG','CDMX', 7777777777)
INTO PATRON(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('EFRAIN','AG','PUEBLA', 3333333333)
INTO PATRON(NOMBRE, APELLIDOS, DIRECCION, TELEFONO) VALUES ('ADRIANA','CG','PUEBLA', 2222222222)
SELECT * FROM DUAL;

  
INSERT ALL
INTO SALIDAS(FECHA_HORA_SALIDA, DESTINO, NO_MATRICULA, ID_PATRON) VALUES (TO_DATE('20/01/2023 06:00:10','DD-MM-YYYY HH24_MI:SS'),'ACAPULCO', 1, 2)
INTO SALIDAS(FECHA_HORA_SALIDA, DESTINO, NO_MATRICULA, ID_PATRON) VALUES (TO_DATE('10/01/2023 12:24:10','DD-MM-YYYY HH24_MI:SS'),'HUATULCO', 2, 1)
INTO SALIDAS(FECHA_HORA_SALIDA, DESTINO, NO_MATRICULA, ID_PATRON) VALUES (TO_DATE('01/01/2023 09:45:10','DD-MM-YYYY HH24_MI:SS'),'CANCUN', 3, 2)
INTO SALIDAS(FECHA_HORA_SALIDA, DESTINO, NO_MATRICULA, ID_PATRON) VALUES (TO_DATE('14/01/2023 15:00:00','DD-MM-YYYY HH24_MI:SS'),'VERACRUZ', 4, 3)
INTO SALIDAS(FECHA_HORA_SALIDA, DESTINO, NO_MATRICULA, ID_PATRON) VALUES (TO_DATE('07/01/2023 05:00:50','DD-MM-YYYY HH24_MI:SS'),'PUERTO VALLARTA', 5, 4)
SELECT * FROM DUAL;

SELECT * FROM SALIDAS;

--CONSULTAR HORARIO Y FECHA
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHA_HORA_SALIDA, 'DD/MM/YYYY HH24:MI:SS') FROM SALIDAS;

--CONSULTAR UNICAMENTE HORARIO
SELECT ID_SALIDA, DESTINO, TO_CHAR(FECHA_HORA_SALIDA, 'HH24:MI:SS') FROM SALIDAS;

COMMIT;

--------------------------------------------------------------------------
-- EJERCICIO AEROLINEA
----------------------

--ENTIDADES FUERTES

CREATE TABLE BASES(
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2(20)
);

CREATE SEQUENCE BASES_SEQ;

CREATE TRIGGER INSERT_BASES 
BEFORE INSERT ON BASES FOR EACH ROW BEGIN
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;

INSERT INTO BASES (TIPO) VALUES ('MANTENIMIENTO');
INSERT INTO BASES (TIPO) VALUES ('DESCANSO');
SELECT * FROM BASES;

CREATE TABLE VUELO(
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2(30),
DESTINO NVARCHAR2(30),
HORARIOVIAJE DATE
);

CREATE SEQUENCE VUELO_SEQ;

CREATE TRIGGER INSERT_VUELO 
BEFORE INSERT ON VUELO FOR EACH ROW BEGIN
SELECT VUELO_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;

INSERT ALL 
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('MEXICO','JAPON', TO_DATE ('20/01/2023 01:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('CDMX','MEDELLIN', TO_DATE ('21/01/2023 02:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('CDMX','COSTA RICA', TO_DATE ('22/01/2023 04:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('MONTERREY','TIJUANA', TO_DATE ('23/01/2023 04:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('PUEBLA','CANCUN', TO_DATE ('24/01/2023 06:30:00', 'DD-MM-YYYY HH24:MI:SS'))
SELECT * FROM DUAL;

CREATE TABLE LISTAS_CLIENTES(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
TELEFONO NVARCHAR2(10),
DIRECCION NVARCHAR2(30)
);

CREATE SEQUENCE LISTAS_CLIENTES_SEQ;

CREATE TRIGGER INSERT_LISTAS_CLIENTES 
BEFORE INSERT ON LISTAS_CLIENTES FOR EACH ROW BEGIN
SELECT LISTAS_CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

INSERT ALL 
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO) VALUES ('AYLIN','XALAPA','2282330908')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALEX','XALAPA','2281072635')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO) VALUES ('ALEJANDRO','CDMX','3023079497')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO) VALUES ('EMMANUEL','CDMX','5630345103')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO) VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;

SELECT * FROM LISTAS_CLIENTES;
SELECT * FROM VUELO;

---------------------------
-- ENTIDADES DEBILES

CREATE TABLE AVIONES(
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2(20),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE AVIONES_SEQ;

CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

INSERT ALL
INTO AVIONES (MODELO, ID_BASE) VALUES ('BOEING', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('AIRBUS 300', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('JET', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('VOLVO', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('Embraer E-Jet', 1)
SELECT * FROM DUAL;
SELECT * FROM AVIONES;

COMMIT;

CREATE TABLE PILOTOS(
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
HORASVIAJE NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE PILOTOS_SEQ;

CREATE TRIGGER INSERT_PILOTOS 
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;

--REGISRO DE PILOTOS
INSERT ALL
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('HUGO',300, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('PACO',600, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('LUIS',400, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('PEDRO',850, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('JAYRO',330, 2)
SELECT * FROM DUAL;


CREATE TABLE VUELO_AVION_PILOTO(
ID_VAP NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_AVION NUMBER,
ID_PILOTO NUMBER,
CONSTRAINT FK_IDVUELO_VAP
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDAVION_VAP
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES (ID_AVION),
CONSTRAINT FK_IDPILOTO_VAP
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS (ID_PILOTO)
);

CREATE SEQUENCE VUELO_AVION_PILOTO_SEQ;

CREATE TRIGGER INSERT_VUELO_AVION_PILOTO 
BEFORE INSERT ON VUELO_AVION_PILOTO FOR EACH ROW BEGIN
SELECT VUELO_AVION_PILOTO_SEQ.NEXTVAL INTO:NEW.ID_VAP FROM DUAL;
END;

--REGISTROS DE VUELO_AVION_PILOTO
INSERT ALL
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (1,3,2)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (2,4,1)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (3,1,4)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (4,2,5)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (5,5,3)
SELECT * FROM DUAL;


CREATE TABLE TRIPULACION(
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION 
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;

--REGISTROS DE TRIPULACION
INSERT ALL
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('ABDIEL',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('MARCOS',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('TAVO',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('AARON',2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('CESAR',2)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;
COMMIT;

CREATE TABLE VUELO_TRIPULACION(
ID_VT NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_TRIPULACION NUMBER,
CONSTRAINT FK_IDVUELO_VT
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDTRIPULACION_VT
FOREIGN KEY (ID_TRIPULACION)
REFERENCES TRIPULACION (ID_TRIPULACION)
);

CREATE SEQUENCE VUELO_TRIPULACION_SEQ;

CREATE TRIGGER INSERT_VUELO_TRIPULACION 
BEFORE INSERT ON VUELO_TRIPULACION FOR EACH ROW BEGIN
SELECT VUELO_TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_VT FROM DUAL;
END;

--REGISTROS DE VUELO_TRIPULACION
INSERT ALL
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (1,2)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (2,3)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (3,4)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (4,5)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (5,1)
SELECT * FROM DUAL;

CREATE TABLE BOLETOS(
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER (6,2),
CONSTRAINT FK_IDVUELO_BOLETOS
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
FOREIGN KEY (ID_CLIENTE)
REFERENCES LISTAS_CLIENTES (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;

CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;

--REGISTROS DE BOLETOS
INSERT ALL
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (1,3,9999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (2,4,8999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (3,5,7999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (4,1,4999.50)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (5,2,5500)
SELECT * FROM DUAL;

SELECT * FROM BOLETOS;
COMMIT;

INSERT INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('EUGENIO',2);

SELECT * FROM TRIPULACION;

-- REVERTIR LA INSERCION DE DATOS ANTES DE GUARDARLOS
-- NOS LLEVA AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;

-- ELIMINAR REGISTROS DE UNA TABLA (UN REGISTRO ESPECIFICO)
-- DEBEMOS ELEGIR UNA COLUMNA O UN DATO COINCIDENTE PARA ELIMINAR DICHA FILA

DELETE FROM TRIPULACION WHERE NOMBRE='EUGENIO';
SELECT * FROM TRIPULACION;

-- MOSTRAR COLUMNAS ESPECIFICAS DE UNA TABLA
SELECT NOMBRE, ID_BASE FROM PILOTOS;
SELECT NOMBRE FROM PILOTOS;

-- LA CONSULTA DE TODOS LOS DATOS SE INCICA CON *
SELECT * FROM PILOTOS;

-- RELACIONANDO DATOS CON UNA CONDICION
SELECT HORASVIAJE, NOMBRE FROM PILOTOS WHERE HORASVIAJE>400;

-- RELACIONANDO DATOS CONCATENANDOLOS CON 'AND'
SELECT HORASVIAJE, NOMBRE, ID_BASE FROM PILOTOS WHERE HORASVIAJE>300 AND ID_BASE=2;

-- UTILIZAMOS BETWEEN PARA BUSCAR RANGOS DE UN VALOR
SELECT * FROM PILOTOS WHERE HORASVIAJE BETWEEN 400 AND 900;

-- BUSCAR VALORES SIMILARES
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%'; -- NOMBRES QUE INICIEN CON P
SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O'; -- NOMBRES QUE TERMINEN CON O

-- FUNCIOES DE AGREGACION
SELECT MAX(HORASVIAJE) FROM PILOTOS;
SELECT MIN(HORASVIAJE) FROM PILOTOS;

-- BUSCAR AL PILOTO CON MAS HORAS
SELECT * FROM PILOTOS WHERE HORASVIAJE = (SELECT MAX(HORASVIAJE) FROM PILOTOS);

COMMIT;

-- ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVIAJE=NULL; -- ACTUALIZAMOS LOS VALORES A NULOS
SELECT * FROM PILOTOS; --VERIFICAMOS QUE SE HAYAN ACTUALIZADO LOS VALORES
ROLLBACK; -- PODEMOS REGRESAR AL ESTADO DEL ULTIMO COMMIT CON ROLLBACK


--REALIZAR UN CONTEO DE FILAS PARA DETERMINADOS DATOS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVIAJE<400;

--OBTENER PROMEDIO DE LOS VALORES DE UNA COLUMNA
SELECT AVG (HORASVIAJE) FROM PILOTOS;

-- SUMATORIA DE VALORES
SELECT SUM (HORASVIAJE) FROM PILOTOS;

--FUNCIONES GROUP BY
--MOSTRAR CUANTOS ALUMNOS HAY POR CADA GENERO
SELECT *FROM ALUMNO;

SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP BY SEXO;

-- ORDENARLOS CON EL COMANDO DESC PARA PONER ORDEN DESCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

-- ORDENARLOS CON EL COMANDO ASC PARA PONER ORDEN ASCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

-- CALCULAR LA EDAD A PARTIR DE FECHA DE NACIMIENTO
SELECT 
trunc(months_between(to_date(to_char(SYSDATE, 'dd/mm/yyyy'), 'dd/mm/yyyy'), to_date(to_char(FECHANAC, 'dd/mm/yyyy'), 'dd/mm/yyyy'))/12) 
FROM ALUMNO;

COMMIT;

-- BUSCAR CONSULTA POR CONSULTA LOS DATOS DE LA TRIUPLACION EN EL VUELO DONDE EL CLIENTE HAYA SIDO ='NOMBRE';
SELECT * FROM LISTAS_CLIENTES WHERE NOMBRE='EMMANUEL'; -- Buscar los datos de la tripulacion
SELECT * FROM BOLETOS WHERE ID_CLIENTE = 4; --Identificar el tripulante que estuvo en el vuelo con el cliente
SELECT * FROM VUELO_TRIPULACION WHERE ID_VUELO = 2; -- Identificar el vuelo del cliente
SELECT * FROM TRIPULACION WHERE ID_TRIPULACION = 5; -- Identificamos la cliente

-- BUSCAR EN UNA SOLA CONSULTA LOS DATOS DE LA TRIUPLACION EN EL VUELO DONDE EL CLIENTE HAYA SIDO ='NOMBRE';
SELECT * FROM TRIPULACION WHERE ID_TRIPULACION = ( 
SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO = (
SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE = (
SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE = 'EMMANUEL'))
);

-- OTRA FORMA UTILIZANDO IN
SELECT * FROM TRIPULACION WHERE ID_TRIPULACION IN
(SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO IN
(SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE IN
(SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE = 'EMMANUEL'))
);

-- CONSULTAS CON JOINS

-- INNER JOIN
-- SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
--PARA QUE LOS JOINS PUEDAN REALIZARSE SE FACILITA MEDIANTE LAS PRIMARY KEYS
-- Y LAS FOREIGN KEYS

--FORMA EXPLICITA
--SE INDICA EL INNER JOIN O JOIN

DESCRIBE PILOTOS;
DESCRIBE BASES;

SELECT * FROM PILOTOS  --Seleccionamos todo de una tabla A
INNER JOIN BASES -- Indicamos la union con el JOIN y la tabla B
ON PILOTOS.ID_BASE=BASES.ID_BASE; -- Indicamos donde se van a unir

SELECT * FROM PILOTOS  --Seleccionamos todo de una tabla A
JOIN BASES -- Indicamos la union con el JOIN y la tabla B
ON PILOTOS.ID_BASE=BASES.ID_BASE; -- Indicamos donde se van a unir

-- LEFT JOIN
-- RIGHT JOIN 

SELECT * FROM BASES 
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

SELECT * FROM LISTAS_CLIENTES
LEFT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE=BOLETOS.ID_CLIENTE;

SELECT * FROM LISTAS_CLIENTES
RIGHT JOIN BOLETOS
ON  LISTAS_CLIENTES.ID_CLIENTE=BOLETOS.ID_CLIENTE;

-- FULL JOIN
SELECT * FROM BASES 
FULL JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE;

SELECT * FROM PILOTOS 
FULL JOIN BASES
ON PILOTOS.ID_BASE=BASES.ID_BASE;

---- IDENTIFICAR LAS TABLAS CON ALIAS
SELECT C.NOMBRE, B.ID_VUELO FROM LISTAS_CLIENTES C --IDENTIFICANDOLA CON UN ALIAS C
INNER JOIN BOLETOS B -- IDENTIFICANDO CON UN ALIAS B
ON C.ID_CLIENTE=B.ID_CLIENTE;

-- CON JOIN BUSCAR LOS DATOS DE LA TRIUPLACION EN EL VUELO DONDE EL CLIENTE HAYA SIDO ='NOMBRE';
SELECT T.ID_TRIPULACION, T.NOMBRE,T.ID_BASE FROM TRIPULACION T  
INNER JOIN VUELO_TRIPULACION  VT
ON T.ID_TRIPULACION= VT.ID_TRIPULACION
INNER JOIN BOLETOS B
ON VT.ID_VUELO=B.ID_VUELO
INNER JOIN LISTAS_CLIENTES LC
ON B.ID_CLIENTE=LC.ID_CLIENTE WHERE NOMBRE = 'EMMANUEL';

-- Buscar Id del avion, modelo y destino del vuelo, del piloto con más horas de vuelo
SELECT A.ID_AVION, A.MODELO,V.DESTINO,P.NOMBRE, P.HORASVIAJE FROM AVIONES A  
INNER JOIN VUELO_AVION_PILOTO  VAP
ON A.ID_AVION= VAP.ID_AVION
INNER JOIN VUELO V
ON VAP.ID_VUELO=V.ID_VUELO
INNER JOIN PILOTOS P
ON VAP.ID_PILOTO=P.ID_PILOTO WHERE HORASVIAJE =(SELECT MAX (HORASVIAJE) FROM PILOTOS);
