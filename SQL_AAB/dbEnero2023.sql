--Con dos guiones podemos poner comentarios

/*Podemos poner comentarios de multiples lineas
SQL -Lenguaje de consulta estructurado (Structured Query Language)
Es un lenguaje para actualizar, obtener y calcular información en bases
de datos relacionales
*/

--Base de datos - conjunto de datos organizados entre si, almacenados en tablas

/* La estructura de als tablas seria de la siguiente manera
Llave primaria -- Id - Toda tabla debe llevar su llave primaria
LLave foranea -- Pueden llevar llave foranea, la cual es una llave primaria
que proviene de otra tabla
-Tipo de Datos (caracteres o numericos, tipo fecha)


NUMBER - Datos numéricos
NVARCHAR2 - Permite entrada de datos de caracteres alfabeticos y tambien 
caracteres especiales
DATE - Utilizado para manejo de fecha y hora
*/

-- ALUMNO
-- MATRICULA O ID
-- NOMBRE
-- FECHA DE NACIMIENTO
-- SEXO
-- GRADO
-- STATUS DE ACTIVO O INACTIVO
-- CURP

-- Creando tabla de alumno
-- La sintaxis puede ir en mayusculas o minusculas, no importa

CREATE TABLE ALUMNO( --Indicamos el nombre de la tabla
ID_ALUMNO NUMBER PRIMARY KEY, --comenzamos con su llvae primaria
NOMBRE NVARCHAR2 (30), -- Indicamos otro dato y el tipo de dato
FECHANACIMIENTO DATE,
SEXO NVARCHAR2 (10),
CURP NVARCHAR2 (18),
GRADO NVARCHAR2 (20),
STATUS NUMBER
);

--Si quiero ver la estructura de una tabla se utiliza DESCRIBE y el nombre de
--la tabla

DESCRIBE ALUMNO;

--Crear una tabla con la carrera de los alumnos

CREATE TABLE CARRERAS(
ID_CARRERA NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
AREA NVARCHAR2(30),
NUM_SEMESTRES NUMBER,
NUM_MATERIAS NUMBER,
CREDITOS NUMBER
);

DESCRIBE ALUMNO;

CREATE TABLE CARRERAS_ALUMNOS (
ID_CA NUMBER PRIMARY KEY,
ID_CARRERA NUMBER,
ID_ALUMNO NUMBER
);

-- Entidades Fuertes
--Son aquellas que tienen sus datos completos y no dependen de otra entiddad 
--o tabla para existir

-- Entidades Debiles
-- Son aquellas que recdiben una llave foranea y esto las hace dependientes
-- de otras tablas para existir

--AGREGANDO RESTRICCIONES A UNA TABLA
-- Las restricciones deben llevar un nombre y se identifican por el comando
-- "CONSTRAINT"

--En la tabla ALUMNO, vamos a agregar una restriccion en el sexo
--para que solo podamos introducir 'MASCULINO' o 'FEMENINO'

ALTER TABLE ALUMNO ADD CONSTRAINT CHECK_SEXO  CHECK 
(SEXO IN ('MASCULINO','FEMENINO'));

DESCRIBE ALUMNO;

-- CREANDO UNA RESTRICCION EN LA TABLA CARRERAS
-- Para no repetir nombres
-- UNIQUE, para agregar una restriccion unica en un registro

ALTER TABLE CARRERAS ADD CONSTRAINT UNQ_NOMBRE_CARRERA
UNIQUE (NOMBRE);

-- AGREGANDO UNA LLAVE FORANEA
-- Una llave foranea tambien es una restriccion, porrque vamos a especificar
-- de donde proviene dicha llave

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_IDALUMNO
FOREIGN KEY (ID_ALUMNO) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES ALUMNO (ID_ALUMNO); --QUIEN DA (DE QUE TABLA Y EN QUE COLUMNA)

ALTER TABLE CARRERAS_ALUMNOS ADD CONSTRAINT FK_IDCARRERA
FOREIGN KEY (ID_CARRERA) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES CARRERAS (ID_CARRERA); --QUIEN DA (DE QUE TABLA Y EN QUE COLUMNA)

--INSERCION DE DATOS INDIVIDUALES

DESCRIBE ALUMNO;

INSERT INTO ALUMNO VALUES 
(1,'AYLIN','19/04/1995', 'FEMENINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(2,'ALEX','08/05/1998', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(3,'ALEJANDRO','25/04/1997', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(4,'ABDIEL','30/12/1997', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(5,'MARCOS','19/05/1996', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(6,'TABO','13/06/1998', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(7,'EMMANUEL','14/06/1993', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(8,'EDUARDO','01/11/1995', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(9,'CESAR','14/02/1997', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);
INSERT INTO ALUMNO VALUES 
(10,'AARON','19/10/1995', 'MASCULINO','AAUL0877623LPJ','8o SEMESTRE',1);

--VISUALIZANDO LOS DATOS DE LA TABLA DESDE EL COMANDO
SELECT * FROM ALUMNO;

--BORRAR UN REGISTRO ESPECIFICANDO EL ID DE ESE REGISTRO
-- BORRAR DE 'NOMBRE DE LA TABLA' DONDE 'INDICAMOS UN CAMPO'

DELETE FROM ALUMNO WHERE ID_ALUMNO = 11;

--INSECION DE DATOS EN LA TABLA CARRERAS

INSERT INTO CARRERAS VALUES
(1, 'ING EN SISTEMAS', 'EXACTAS', 8, 20, 300);
INSERT INTO CARRERAS VALUES
(2, 'MEDICINA', 'CIENCIAS SALUD', 10, 20, 300);
INSERT INTO CARRERAS VALUES
(3, 'DERECHO', 'HUMANIDADES', 8, 20, 300);
INSERT INTO CARRERAS VALUES
(4, 'NUTRICION', 'CIENCIAS SALUD', 8, 20, 300);
INSERT INTO CARRERAS VALUES
(5, 'LIC ADMINISTRACION', 'ECONOMICO AD', 8, 20, 300);

SELECT * FROM CARRERAS;

--Para que los registros se guarden en la base de datos

COMMIT;

--Para guardar el script se utiliza el comando Ctrl + S

DESCRIBE CARRERAS_ALUMNOS;
--Insecion de datos en la tabla relacional  CARRERAS_ALUMNOS

INSERT INTO CARRERAS_ALUMNOS VALUES (1,1,1);
INSERT INTO CARRERAS_ALUMNOS VALUES (2,2,2);
INSERT INTO CARRERAS_ALUMNOS VALUES (3,1,3);
INSERT INTO CARRERAS_ALUMNOS VALUES (4,5,4);
INSERT INTO CARRERAS_ALUMNOS VALUES (5,3,5);

SELECT * FROM CARRERAS_ALUMNOS;

--AGREGAR UNA COLUMNA A UNA TABLA EXISTENTE
--PODEMOS ESPECIFICAR QUE VAMOS A GREGAR UNA COLUMNA CON ADD COLUMN
--O SI NO ESPECIFICAMOS AUTOMATICAMENTE AGRAGA UNA COLUMNA, INDICANDO EL NOMBRE
ALTER TABLE CARRERAS ADD PRESUPUESTO_ANUAL NUMBER(5,2); --INDICAMOS LA LONGITUD
--DE DIGITOS EN LOS CUALES SERIAN 5 DIGITOS, DE LOS CUALES 2 SERIAN DECIMALES.
--TENDIAMOS ASI VALORES DESDE -999.99 HASTA 999.99

DESCRIBE CARRERAS;

--MODIFICAR TIPO DE DATO DE LA COLUMNA (SIEMPRE Y CUANDONO TENGA DATOS INSERTADOS)

ALTER TABLE CARRERAS MODIFY PRESUPUESTO_ANUAL NVARCHAR2(10);

--RENOMBRAR UNA COLUMNA 
ALTER TABLE CARRERAS RENAME COLUMN PRESUPUESTO_ANUAL TO PRESUPUESTO_MENSUAL;

--EJERCICIO
--CREAR UNA TABLA QUE SE LLAME TUTORES
-- ID DEL TUTOR, NOMBRE DEL TUTOR, CLAVE DEL TUTOR
-- PONERLE RESTRICCION A LA CLAVE DEL TUTOR (A,B,C,D)
-- INSERTAR 10 REGISTROS


-- CREAR UNA TABLA RELACIONAL ALUMNOS_TUTORES
-- ID DE LA TABLA
-- ID DEL ALUMNO
-- ID DEL TUTOR
-- INSERTAR 5 REGISTROS


CREATE TABLE TUTORES( --Indicamos el nombre de la tabla
ID_TUTOR NUMBER PRIMARY KEY, --comenzamos con su llvae primaria
NOMBRE_TUTOR NVARCHAR2 (30), -- Indicamos otro dato y el tipo de dato
CLAVE_TUTOR NVARCHAR2 (10)
);

DESCRIBE TUTORES;

ALTER TABLE TUTORES ADD CONSTRAINT CHECK_CLAVE  CHECK 
(CLAVE_TUTOR IN ('A','B','C','D'));

INSERT INTO TUTORES VALUES (1, 'JORGE', 'A');
INSERT INTO TUTORES VALUES (2, 'MARCOS', 'B');
INSERT INTO TUTORES VALUES (3, 'AYLIN', 'A');
INSERT INTO TUTORES VALUES (4, 'ALEX', 'C');
INSERT INTO TUTORES VALUES (5, 'GUSTAVO', 'D');
INSERT INTO TUTORES VALUES (6, 'EMMANUEL', 'B');
INSERT INTO TUTORES VALUES (7, 'CESAR', 'A');
INSERT INTO TUTORES VALUES (8, 'EDUARDO', 'C');
INSERT INTO TUTORES VALUES (9, 'AARON', 'D');
INSERT INTO TUTORES VALUES (10, 'ALEJANDRO', 'B');

SELECT * FROM TUTORES;

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER
);

DESCRIBE ALUMNOS_TUTORES;

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_IDALUMNO2
FOREIGN KEY (ID_ALUMNO) -- QUIEN RECIBE (EN QUE COLUMNA)
REFERENCES ALUMNO (ID_ALUMNO); --QUIEN DA (DE QUE TABLA Y EN QUE COLUMNA)

ALTER TABLE ALUMNOS_TUTORES ADD CONSTRAINT FK_IDTUTORES
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR);

INSERT INTO ALUMNOS_TUTORES VALUES (1, 4, 2);
INSERT INTO ALUMNOS_TUTORES VALUES (2, 6, 5);
INSERT INTO ALUMNOS_TUTORES VALUES (3, 2, 4);
INSERT INTO ALUMNOS_TUTORES VALUES (4, 7, 3);
INSERT INTO ALUMNOS_TUTORES VALUES (5, 3, 6);

SELECT * FROM ALUMNOS_TUTORES;

--ELIMINAR UNA TABLA OCN TODO Y SUS DATOS
DROP TABLE ALUMNOS_TUTORES;

CREATE TABLE ALUMNOS_TUTORES(
ID_AT NUMBER PRIMARY KEY,
ID_ALUMNO NUMBER,
ID_TUTOR NUMBER,
CONSTRAINT FK_IDTUTORES
FOREIGN KEY (ID_TUTOR)
REFERENCES TUTORES (ID_TUTOR),
CONSTRAINT FK_IDALUMNO2
FOREIGN KEY (ID_ALUMNO)
REFERENCES ALUMNO (ID_ALUMNO)
);


--CREANDO SECUENCIAS
--Se emplea para generar valores 
--estos pueden ser consecutivos (incremento de 1)
--o con un incremento de mas valores
--Se utiliza para generar las llaves primarias y asegurarnos
-- que los valores no se repitan

--CREANDO UNA SECUENCIA DEFINIENDO LOS VALORES

CREATE SEQUENCE ALUMNO_SEQ --CREAMOS LA SECUENCIA Y SU NOMBRE
START WITH 11 -- EL VALOR EN EL QUE INICIA LA SECUENCIA
INCREMENT BY 1 -- INCREMENTA EL VALOR DE LA SECUENCIA COMO SE LE INDIQUE
MAXVALUE 999 -- INDICAMOS EL VALOR MAXIMO PARA LA SECUENCIA
MINVALUE 1 --INDICAMOS EL VALOR MAXIMO PARA LA SECUENCIA
CYCLE; --INDICAMOS SI LA SECUENCIA UNA VEZ LLEGADO A SU MAXIMO VALOR INICE DE NUEVO
-- SI NO INDICAMOS EL CYCLE, POR DEFAULT LA SECUENCIA CONTINUARIA

-- CREAR UNA SECUENCIA CON LOS VALORES POR DEFECTO

CREATE SEQUENCE ALUMNOS_TUTORES_SEQ;

--TRIGGER (DISPARADOR) - EJECUTAR UNA ACCION O DESENCADENAR UN EVENTO
COMMIT;

CREATE TRIGGER INSERT_ALUMNOS --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNO FOR EACH ROW BEGIN --INDICAMOS DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNO_SEQ.NEXTVAL INTO:NEW.ID_ALUMNO FROM DUAL; --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

INSERT INTO ALUMNO VALUES 
(1,'AYLIN','19/04/1995', 'FEMENINO','AAUL0877623LPJ','8o SEMESTRE',1);

SELECT * FROM ALUMNO;

--CREAR EL TRIGGER PARA ALUMNOS_TUTORES_SEQ

CREATE TRIGGER INSERT_ALUMNOS_TUTORES --CREAMOS EL TRIGGER Y SU NOMBRE
BEFORE INSERT ON ALUMNOS_TUTORES FOR EACH ROW BEGIN --INDICAMOS DONDE SE EJECUTA EL TRIGGER
SELECT ALUMNOS_TUTORES_SEQ.NEXTVAL INTO:NEW.ID_AT FROM DUAL; --SELECCIONA EL VALOR DE LA SECUENCIA Y LO INSERTA
END;

--OTRA FORMA DE INSECION - INSECION MASIVA

INSERT ALL
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (1,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (2,2)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (3,1)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (4,3)
INTO ALUMNOS_TUTORES (ID_ALUMNO, ID_TUTOR) VALUES (5,3)
SELECT * FROM DUAL;

SELECT * FROM ALUMNOS_TUTORES;

------------------------------------------------------------------------------------------------------

--EJERCICIO 1
--Se quiere diseñar una base de datos relacional para almacenar información sobre 
--los asuntos que lleva un gabinete de abogados. Cada asunto tiene un número de 
--expediente que lo identifica, y corresponde a un solo clientve. 
--Del asunto se debe almacenar el periodo (fecha de inicio y fecha de archivo o 
--finalización), su estado (en trámite, archivado, etc.), así como los datos personales 
--del cliente al que pertenece (DNI, nombre, dirección, etc.). Algunos asuntos 
--son llevados por uno o varios procuradores, de los que nos interesa también los datos personales.

CREATE TABLE CLIENTES (
ID_CLIENTE NUMBER PRIMARY KEY,
DNI VARCHAR2 (20),
NOMBRE_CLIENTE VARCHAR2(30),
FECHA_NAC_CLIENTE DATE,
DIRECCION_CLIENTE VARCHAR2 (30)
);

CREATE TABLE PROCURADORES (
ID_PROCURADOR NUMBER PRIMARY KEY,
DNI_PROCURADOR VARCHAR2(20),
NOMBRE_PROCURADOR VARCHAR2 (30),
FECHA_NAC_PROCURADOR DATE
);

CREATE SEQUENCE SEQUENCE_CLIENTES;

CREATE TRIGGER INSERT_CLIENTES
BEFORE INSERT ON CLIENTES FOR EACH ROW BEGIN
SELECT SEQUENCE_CLIENTES.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

CREATE SEQUENCE SEQUENCE_PROCURADORES;

CREATE TRIGGER INSERT_PROCURADORES
BEFORE INSERT ON PROCURADORES FOR EACH ROW BEGIN
SELECT SEQUENCE_PROCURADORES.NEXTVAL INTO:NEW.ID_PROCURADOR FROM DUAL;
END;

INSERT ALL
INTO CLIENTES (DNI, NOMBRE_CLIENTE, FECHA_NAC_CLIENTE, DIRECCION_CLIENTE) VALUES ('AUBA971230', 'ABDIEL AGUILAR', '30/12/1997', 'MALLORCA 11')
INTO CLIENTES (DNI, NOMBRE_CLIENTE, FECHA_NAC_CLIENTE, DIRECCION_CLIENTE) VALUES ('AJEX980508', 'ALEX LOZA', '08/05/1998', 'REPUBLICA 107')
INTO CLIENTES (DNI, NOMBRE_CLIENTE, FECHA_NAC_CLIENTE, DIRECCION_CLIENTE) VALUES ('MOPE950419', 'AYLIN MORALES', '19/04/1995', 'ENRIQUE SEGOBIANO')
INTO CLIENTES (DNI, NOMBRE_CLIENTE, FECHA_NAC_CLIENTE, DIRECCION_CLIENTE) VALUES ('BUENO96111', 'MARCOS BUENO', '11/11/1996', 'CALLE XIQUEÑA 47')
INTO CLIENTES (DNI, NOMBRE_CLIENTE, FECHA_NAC_CLIENTE, DIRECCION_CLIENTE) VALUES ('CESA950113', 'CESAR SOBERANIS', '13/01/1995', 'LAZARO CARDENAS 53')
SELECT * FROM DUAL;

SELECT * FROM CLIENTES;

INSERT ALL
INTO PROCURADORES (DNI_PROCURADOR, NOMBRE_PROCURADOR, FECHA_NAC_PROCURADOR) VALUES ('EMMA971216', 'EMMANUEL SANDOVAL', '16/12/1997')
INTO PROCURADORES (DNI_PROCURADOR, NOMBRE_PROCURADOR, FECHA_NAC_PROCURADOR) VALUES ('TAVO990703', 'TAVO FAJARDO', '03/07/1999')
INTO PROCURADORES (DNI_PROCURADOR, NOMBRE_PROCURADOR, FECHA_NAC_PROCURADOR) VALUES ('JOJA930412', 'JORGE ALEJANDRO', '12/04/1993')
INTO PROCURADORES (DNI_PROCURADOR, NOMBRE_PROCURADOR, FECHA_NAC_PROCURADOR) VALUES ('AUBA901013', 'EDUARDO AGUILAR', '13/10/1990')
INTO PROCURADORES (DNI_PROCURADOR, NOMBRE_PROCURADOR, FECHA_NAC_PROCURADOR) VALUES ('JECA950228', 'JESSICA CANCELA', '28/02/1995')
SELECT * FROM DUAL;

SELECT * FROM PROCURADORES;

CREATE TABLE ASUNTOS(
ID_ASUNTO NUMBER PRIMARY KEY,
FECHA_INICIO DATE,
FECHA_ARCHIVO DATE,
ESTADO VARCHAR2 (10),
ID_CLIENTE NUMBER,
CONSTRAINT FK_CLIENTES -- CREAMOS LA FERIGN KEY
FOREIGN KEY (ID_CLIENTE) -- INDICAMOS A DONDE LLEGA
REFERENCES CLIENTES (ID_CLIENTE) -- INDICAMOS LA FUENTE
);

CREATE TABLE ASUNTOS_PROCURADOR (
ID_AP NUMBER PRIMARY KEY,
ID_ASUNTO NUMBER,
ID_PROCURADOR,
CONSTRAINT FK_ASUNTO
FOREIGN KEY (ID_ASUNTO)
REFERENCES ASUNTOS (ID_ASUNTO),
CONSTRAINT FK_PROCURADOR
FOREIGN KEY (ID_PROCURADOR)
REFERENCES PROCURADORES (ID_PROCURADOR)
);


CREATE SEQUENCE SEQUENCE_ASUNTOS;

CREATE TRIGGER INSERT_ASUNTOS
BEFORE INSERT ON ASUNTOS FOR EACH ROW BEGIN
SELECT SEQUENCE_ASUNTOS.NEXTVAL INTO:NEW.ID_ASUNTO FROM DUAL;
END;

CREATE SEQUENCE SEQUENCE_AP;

CREATE TRIGGER INSERT_ASUNTOS_PROCURADOR
BEFORE INSERT ON ASUNTOS_PROCURADOR FOR EACH ROW BEGIN
SELECT SEQUENCE_AP.NEXTVAL INTO:NEW.ID_AP FROM DUAL;
END;

INSERT ALL
INTO ASUNTOS (FECHA_INICIO, FECHA_ARCHIVO, ESTADO, ID_CLIENTE) VALUES ('30/12/2020', '03/05/2022', 'ARCHIVADO', 1)
INTO ASUNTOS (FECHA_INICIO, FECHA_ARCHIVO, ESTADO, ID_CLIENTE) VALUES ('03/02/2021', NULL, 'EN PROCESO', 2)
INTO ASUNTOS (FECHA_INICIO, FECHA_ARCHIVO, ESTADO, ID_CLIENTE) VALUES ('24/06/2022', NULL, 'EN PROCESO', 3)
INTO ASUNTOS (FECHA_INICIO, FECHA_ARCHIVO, ESTADO, ID_CLIENTE) VALUES ('15/07/2022', '03/08/2022', 'ARCHIVADO', 4)
INTO ASUNTOS (FECHA_INICIO, FECHA_ARCHIVO, ESTADO, ID_CLIENTE) VALUES ('11/07/2022', '03/09/2022', 'ARCHIVADO', 5)
SELECT * FROM DUAL;

SELECT * FROM ASUNTOS;

INSERT ALL
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (1, 2)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (1, 3)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (2, 1)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (3, 4)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (3, 1)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (4, 5)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (4, 2)
INTO ASUNTOS_PROCURADOR (ID_ASUNTO, ID_PROCURADOR) VALUES (5, 3)
SELECT * FROM DUAL;

SELECT * FROM ASUNTOS_PROCURADOR;

COMMIT;


---------------------------------------------------------------------------------------------------------------
--Ejercico 3

--Entidades fuertes

CREATE TABLE BASES(
ID_BASE NUMBER PRIMARY KEY,
TIPO NVARCHAR2 (20));

CREATE SEQUENCE BASES_SEQ;

CREATE TRIGGER INSERT_BASES
BEFORE INSERT ON BASES FOR EACH ROW BEGIN
SELECT BASES_SEQ.NEXTVAL INTO:NEW.ID_BASE FROM DUAL;
END;

INSERT INTO BASES (TIPO) VALUES ('MANTENIMIENTO');
INSERT INTO BASES (TIPO) VALUES ('DESCANSO');

SELECT * FROM BASES;

------------
CREATE TABLE VUELO(
ID_VUELO NUMBER PRIMARY KEY,
ORIGEN NVARCHAR2 (30),
DESTINO NVARCHAR2 (30),
HORARIOVIAJE DATE
);

CREATE SEQUENCE VUELO_SEQ;

CREATE TRIGGER INSERT_VUELO
BEFORE INSERT ON VUELO FOR EACH ROW BEGIN
SELECT VUELO_SEQ.NEXTVAL INTO:NEW.ID_VUELO FROM DUAL;
END;

INSERT ALL 
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('MEXICO','JAPON', TO_DATE('20/01/2023 01:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('CDMX','MEDELLIN', TO_DATE('21/01/2023 02:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('CDMX','COSTA RICA', TO_DATE('22/01/2023 04:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('MONTERREY','TIJUANA', TO_DATE('23/01/2023 05:30:00', 'DD-MM-YYYY HH24:MI:SS'))
INTO VUELO (ORIGEN, DESTINO, HORARIOVIAJE) VALUES
('PUEBLA','CANCUN', TO_DATE('24/01/2023 06:30:00', 'DD-MM-YYYY HH24:MI:SS'))
SELECT * FROM DUAL;

SELECT * FROM VUELO;

-----------
CREATE TABLE LISTAS_CLIENTES(
ID_CLIENTE NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2 (30),
DIRECCION NVARCHAR2 (30),
TELEFONO NUMBER
);

CREATE SEQUENCE LISTAS_CLIENTES_SEQ;

CREATE TRIGGER INSERT_LISTAS_CLIENTES
BEFORE INSERT ON LISTAS_CLIENTES FOR EACH ROW BEGIN
SELECT LISTAS_CLIENTES_SEQ.NEXTVAL INTO:NEW.ID_CLIENTE FROM DUAL;
END;

INSERT ALL
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('AYLIN','XALAPA','2282330908')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEX','XALAPA','2281072635')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('ALEJANDRO','CDMX','3023079497')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EMMANUEL','CDMX','5630345103')
INTO LISTAS_CLIENTES (NOMBRE, DIRECCION, TELEFONO)  VALUES ('EDUARDO','MORELIA','4438443145')
SELECT * FROM DUAL;

SELECT * FROM LISTAS_CLIENTES;


-- ENTIDADES DEBILES

CREATE TABLE AVIONES(
ID_AVION NUMBER PRIMARY KEY,
MODELO NVARCHAR2(20),
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_AVIONES
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_AVIONES CHECK (ID_BASE IN (1))
);

CREATE SEQUENCE AVIONES_SEQ;

CREATE TRIGGER INSERT_AVIONES
BEFORE INSERT ON AVIONES FOR EACH ROW BEGIN
SELECT AVIONES_SEQ.NEXTVAL INTO:NEW.ID_AVION FROM DUAL;
END;

INSERT ALL
INTO AVIONES (MODELO, ID_BASE) VALUES ('BOEING', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('AIRBUS 300', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('JET', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('EMBRAER', 1)
INTO AVIONES (MODELO, ID_BASE) VALUES ('VOLVO', 1)
SELECT * FROM DUAL;

SELECT * FROM AVIONES;

-----------
CREATE TABLE PILOTOS(
ID_PILOTO NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
HORASVIAJE NUMBER,
ID_BASE NUMBER,
CONSTRAINT FK_IDBASE_PILOTOS
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_PILOTOS CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE PILOTOS_SEQ;

CREATE TRIGGER INSERT_PILOTOS
BEFORE INSERT ON PILOTOS FOR EACH ROW BEGIN
SELECT PILOTOS_SEQ.NEXTVAL INTO:NEW.ID_PILOTO FROM DUAL;
END;

INSERT ALL
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('HUGO', 300, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('PACO', 600, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('LUIS', 400, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('PEDRO', 850, 2)
INTO PILOTOS (NOMBRE, HORASVIAJE, ID_BASE) VALUES ('JAYRO', 330, 2)
SELECT * FROM DUAL;

SELECT * FROM PILOTOS;

---------
CREATE TABLE VUELO_AVION_PILOTO(
ID_VAP NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_AVION NUMBER,
ID_PILOTO NUMBER,
CONSTRAINT FK_IDVUELO_VAP
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDAVION_VAP
FOREIGN KEY (ID_AVION)
REFERENCES AVIONES (ID_AVION),
CONSTRAINT FK_IDPILOTO_VAP
FOREIGN KEY (ID_PILOTO)
REFERENCES PILOTOS (ID_PILOTO)
);

CREATE SEQUENCE VUELO_AVION_PILOTO_SEQ;

CREATE TRIGGER INSERT_VUELO_AVION_PILOTO
BEFORE INSERT ON VUELO_AVION_PILOTO FOR EACH ROW BEGIN
SELECT VUELO_AVION_PILOTO_SEQ.NEXTVAL INTO:NEW.ID_VAP FROM DUAL;
END;

INSERT ALL
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (1, 3, 2)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (2, 4, 1)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (3, 1, 4)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (4, 2, 3)
INTO VUELO_AVION_PILOTO (ID_VUELO, ID_AVION, ID_PILOTO) VALUES (5, 5, 5)
SELECT * FROM DUAL;

SELECT * FROM VUELO_AVION_PILOTO;

---------
CREATE TABLE TRIPULACION(
ID_TRIPULACION NUMBER PRIMARY KEY,
NOMBRE NVARCHAR2(30),
ID_BASE NUMBER, 
CONSTRAINT FK_IDBASE_TRIPULACION
FOREIGN KEY (ID_BASE)
REFERENCES BASES (ID_BASE),
CONSTRAINT CHECK_BASE_TRIPULACION CHECK (ID_BASE IN (2))
);

CREATE SEQUENCE TRIPULACION_SEQ;

CREATE TRIGGER INSERT_TRIPULACION
BEFORE INSERT ON TRIPULACION FOR EACH ROW BEGIN
SELECT TRIPULACION_SEQ.NEXTVAL INTO:NEW.ID_TRIPULACION FROM DUAL;
END;

INSERT ALL
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('ABDIEL', 2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('MARCOS', 2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('TAVO', 2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('AARON', 2)
INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('CESAR', 2)
SELECT * FROM DUAL;

SELECT * FROM TRIPULACION;

---------
CREATE TABLE VUELO_TRIPULACION(
ID_VT NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_TRIPULACION NUMBER,
CONSTRAINT FK_IDVUELO_VT
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO(ID_VUELO),
CONSTRAINT FK_IDTRIPULACION_VT
FOREIGN KEY (ID_TRIPULACION)
REFERENCES TRIPULACION (ID_TRIPULACION)
);

CREATE SEQUENCE VT_SEQ;

CREATE TRIGGER INSERT_VT
BEFORE INSERT ON VUELO_TRIPULACION FOR EACH ROW BEGIN
SELECT VT_SEQ.NEXTVAL INTO:NEW.ID_VT FROM DUAL;
END;

INSERT ALL
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (1, 2)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (2, 3)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (3, 4)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (4, 5)
INTO VUELO_TRIPULACION (ID_VUELO, ID_TRIPULACION) VALUES (5, 1)
SELECT * FROM DUAL;

SELECT * FROM VUELO_TRIPULACION;

---------
CREATE TABLE BOLETOS(
ID_BOLETO NUMBER PRIMARY KEY,
ID_VUELO NUMBER,
ID_CLIENTE NUMBER,
COSTO NUMBER (6,2),
CONSTRAINT FK_IDVUELO_BOLETOS
FOREIGN KEY (ID_VUELO)
REFERENCES VUELO (ID_VUELO),
CONSTRAINT FK_IDCLIENTE_BOLETOS
FOREIGN KEY (ID_CLIENTE)
REFERENCES LISTAS_CLIENTES (ID_CLIENTE)
);

CREATE SEQUENCE BOLETOS_SEQ;

CREATE TRIGGER INSERT_BOLETOS
BEFORE INSERT ON BOLETOS FOR EACH ROW BEGIN
SELECT BOLETOS_SEQ.NEXTVAL INTO:NEW.ID_BOLETO FROM DUAL;
END;

INSERT ALL
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (1, 3, 9999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (2, 4, 8999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (3, 5, 7599.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (4, 1, 4999.99)
INTO BOLETOS (ID_VUELO, ID_CLIENTE, COSTO) VALUES (5, 2, 5500.00)
SELECT * FROM DUAL;

SELECT * FROM BOLETOS;
COMMIT;

INSERT INTO TRIPULACION (NOMBRE, ID_BASE) VALUES ('EUGENIO',2);
SELECT * FROM TRIPULACION;

--REVERTIR LA INSERCION DE DATOS ANTES DE GUARDADRLOS
--NOS LLEVA AL ESTADO DEL ULTIMO COMMIT
ROLLBACK;

--ELIMINAR REGISTROS DE UNA TABLA (UN REGISTRO ESPECIFICO)
--DEBEMOS ELEGIR UNA COLUMNA O UN DATO COINCIDENTE PARA ELIMINAR DICHA FILA

DELETE FROM TRIPULACION WHERE ID_TRIPULACION=7;

--MOSTRAR COLUMNAS ESPECIFICAS DE UNA TABLA

SELECT NOMBRE FROM PILOTOS; --SOLO UNA COLUMNA
SELECT NOMBRE, ID_BASE FROM PILOTOS; --PODEMOS SELECCIONAR LAS COLUMNAS QUE QUERAMOS
SELECT * FROM PILOTOS; --CONSULTAMOS TODOS LOS DATOS CON EL INDICADOR *

--RELACIONANDO DATOS CON UNA CONDICION
SELECT HORASVIAJE, NOMBRE FROM PILOTOS WHERE HORASVIAJE>400;

--RELACIONANDO DATOS CONCATENANDOLOS CON 'AND'
SELECT HORASVIAJE, NOMBRE, ID_BASE FROM PILOTOS WHERE HORASVIAJE>300 AND ID_BASE=2;

--UTILIZAMOS BETWEEN PATA BUSCAR RANGOS DE UN VALOR
SELECT * FROM PILOTOS WHERE HORASVIAJE BETWEEN 400 AND 900;

--BUSCAR VALORES SIMILARES
SELECT * FROM PILOTOS WHERE NOMBRE LIKE 'P%';
SELECT * FROM PILOTOS WHERE NOMBRE LIKE '%O';

--FUNCIONES DE AGREGACION
SELECT MAX(HORASVIAJE) FROM PILOTOS;
SELECT MIN(HORASVIAJE) FROM PILOTOS;

--BUSCAR AL PILOTO CON MAS HORAS DE VIAJE
SELECT * FROM PILOTOS WHERE HORASVIAJE=(SELECT MAX(HORASVIAJE) FROM PILOTOS);
COMMIT;

--ESTABLECER UNA COLUMNA CON VALORES NULOS
UPDATE PILOTOS SET HORASVIAJE=NULL;--ACTUALIZAMOS LOS VALORES DE UNA COLUMNA A NULOS
SELECT * FROM PILOTOS;--VERIFICAMOS QUE SE HAYAN ACTUALIZADO LOS VALORES
ROLLBACK;--PODEMOS REGRESAR AL ESTADO DEL ULTIMO COMMIT CON EL ROLLBACK

--REALIZAR UN CONTEO DE FILAS PARA DETERMINAR DATOS
SELECT COUNT (ID_PILOTO) FROM PILOTOS WHERE HORASVIAJE>400;

-- OBTERNER EL PROMEDIO DE LOS VALORE DE UNA COLUMNA (HORASVIAJE)
SELECT AVG (HORASVIAJE) FROM PILOTOS;

--SUMATORIA DE VALORES
SELECT SUM (HORASVIAJE) FROM PILOTOS;



--FUNCIONES GROUP BY
--MOSTRAR CUANTOS ALUMNOS HAY POR CADA GENERO
SELECT * FROM ALUMNO;

SELECT COUNT (ID_ALUMNO), SEXO FROM ALUMNO GROUP BY SEXO;

--ORDENARLOS CON EL COMANDO DESC PARA PONER EN ORDEN DESCENDIENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE DESC;

--ORDENARLOS CON EL COMANDO DESC PARA PONER EN ORDEN ASCENDENTE
SELECT * FROM ALUMNO ORDER BY NOMBRE ASC;

COMMIT;

-- BUSCAR LOS DATOS DE LA TRIUPLACION EN EL VUELO DONDE EL CLIENTE HAYA SIDO ='NOMBRE';
--HACIENDO VARIAS CONSULTAS PARA LLEGAR AL RESULTADO
SELECT * FROM LISTAS_CLIENTES WHERE NOMBRE = 'AYLIN';
SELECT * FROM BOLETOS WHERE ID_CLIENTE = 1;
SELECT * FROM VUELO_TRIPULACION WHERE ID_VUELO = 4;
SELECT * FROM TRIPULACION WHERE ID_TRIPULACION = 5;

--CON UNA SOLA CONSULTA LLEGAMOS AL MISMO RESULTADO
SELECT * FROM TRIPULACION WHERE ID_TRIPULACION = (
SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO = (
SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE = (
SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE = 'AYLIN'
)));

--TAMBIEN PODEMOS HACERLO CON 'IN'
SELECT * FROM TRIPULACION WHERE ID_TRIPULACION IN (
SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO IN (
SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE IN (
SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE = 'AYLIN'
)));


--CONSULTAS CON JOIN

--INNER JOIN
--SE MUESTRAN LOS REGISTROS QUE COINCIDEN DE UNA TABLA 'A' Y UNA TABLA 'B'
--LA COINCIDENCIA O EL CAMPO QUE LOS UNE (LLAVE) O MUESTRA JUSTO EN EL MEDIO
--PARA QUE LOS JOINS PUEDAN REALIZARSE SE FACILITA MEDIANTE LAS PRIMARY KEYS Y LAS
--FOREIGN KEYS

--FORMA EXPLICITA
--SE INDICA EN INNER JOIN O JOIN

DESCRIBE PILOTOS;
DESCRIBE BASES;

SELECT * FROM PILOTOS --SELECCIONAMOS TODO DE UNA TABLA 'A'
INNER JOIN BASES --INDICAMOS LA UNION CON EL JOIN Y LA TABLA 'B'
ON PILOTOS.ID_BASE = BASES.ID_BASE; --INDICAMOS DONDE SE VAN A UNIR

--SE PUEDE HACER LO MISMO SI SOLO ESCRIBIMOS JOIN
SELECT * FROM PILOTOS
JOIN BASES
ON PILOTOS.ID_BASE = BASES.ID_BASE;


--LEFT JOIN / RIGHT JOIN

SELECT * FROM BASES
LEFT JOIN PILOTOS
ON PILOTOS.ID_BASE = BASES.ID_BASE;

SELECT * FROM LISTAS_CLIENTES
LEFT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE = BOLETOS.ID_CLIENTE;

SELECT * FROM LISTAS_CLIENTES
RIGHT JOIN BOLETOS
ON LISTAS_CLIENTES.ID_CLIENTE = BOLETOS.ID_CLIENTE;

--FULL JOIN
SELECT * FROM BASES
FULL JOIN PILOTOS
ON PILOTOS.ID_BASE=BASES.ID_BASE
ORDER BY BASES.ID_BASE ASC; --ESTO LO PUSE PORQUE ME LOS PONIA DESORDENADOS

--IDENTIFICAR LAS TABLAS CON ALIAS
SELECT * FROM LISTAS_CLIENTES C --IDENTIFICANDOLA CON UN ALIAS C
INNER JOIN BOLETOS B --IDENTIFICANDO CON UN ALIAS B
ON C.ID_CLIENTE=B.ID_CLIENTE;


SELECT * FROM TRIPULACION WHERE ID_TRIPULACION = (
SELECT ID_TRIPULACION FROM VUELO_TRIPULACION WHERE ID_VUELO = (
SELECT ID_VUELO FROM BOLETOS WHERE ID_CLIENTE = (
SELECT ID_CLIENTE FROM LISTAS_CLIENTES WHERE NOMBRE = 'AYLIN'
)));

SELECT T.ID_TRIPULACION,T.NOMBRE,T.ID_BASE FROM TRIPULACION T
JOIN VUELO_TRIPULACION V
ON T.ID_TRIPULACION = V.ID_TRIPULACION
JOIN BOLETOS B
ON V.ID_VUELO = B.ID_VUELO
JOIN LISTAS_CLIENTES L
ON B.ID_CLIENTE = L.ID_CLIENTE
WHERE NOMBRE = 'AYLIN';








